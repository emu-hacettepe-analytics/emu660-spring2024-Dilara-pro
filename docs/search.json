[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to my web page!",
    "section": "",
    "text": "My name is Dilara Akkus. I am a Ph.D. student and a research assistant in the Department of Industrial Engineering at Hacettepe University. I am extremely passionate about the fields of statistics, data science and machine learning.\n\n\n\n Back to top"
  },
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "STOP COMPLAINING, IT SOLVES NOTHING.",
    "section": "",
    "text": "My project will provide insights about waste management, which is of vital importance to the world and humanity. I hope to convey the awareness and perspective I wish to share with you, since change begins with awareness, and we have to change our way so that our children can live in the world they deserve!"
  },
  {
    "objectID": "project.html#data-source",
    "href": "project.html#data-source",
    "title": "STOP COMPLAINING, IT SOLVES NOTHING.",
    "section": "2.1 Data Source ",
    "text": "2.1 Data Source \nThe references from which I have gathered the data may include:\n\nWaste Statistics, TURKSTAT\nEnvironment Regional Data, Biruni TURKSTAT\nWaste Data, Ankara Municipality"
  },
  {
    "objectID": "project.html#general-information-about-data",
    "href": "project.html#general-information-about-data",
    "title": "STOP COMPLAINING, IT SOLVES NOTHING.",
    "section": "2.2 General Information About Data ",
    "text": "2.2 General Information About Data \n\nThe municipal waste amount data of Turkiye, which includes information such as the population of Turkiye and its 81 provinces’ municipalities, total waste amounts for the year 2022, the average waste amount per person, etc.:\n\n\n\nShow the code\nlibrary(openxlsx)\n\n\nWarning: package 'openxlsx' was built under R version 4.3.3\n\n\nShow the code\nmunicipal_waste &lt;- read.xlsx(\"project/data/municipal_waste.xlsx\")\nstr(municipal_waste)\n\n\n'data.frame':   88 obs. of  8 variables:\n $ Belediye.atık.hizmeti.istatistikleri,.2022.Municipal.waste.services.statistics,.2022: chr  NA \"İl\\nProvince\" \"Türkiye\" \"Adana\" ...\n $ X2                                                                                  : chr  \"Toplam belediye nüfusu\\nTotal municipal population\" NA \"80785141\" \"2274106\" ...\n $ X3                                                                                  : chr  \"Toplam belediye sayısı \\nTotal \\nnumber of municipalities  \" NA \"1391\" \"16\" ...\n $ X4                                                                                  : chr  \"Atık hizmeti veren belediye \\nsayısı\\nNumber of municipalities providing waste services \" NA \"1389\" \"16\" ...\n $ X5                                                                                  : chr  \"Atık hizmeti verilen belediye nüfusu\\nPopulation of municipalities served by waste services \" NA \"80319403.100000009\" \"2260333.2000000002\" ...\n $ X6                                                                                  : chr  \"Atık hizmeti\\nverilen belediye\\nnüfusunun\\ntoplam belediye\\nnüfusuna oranı (%)\\nRate of municipal population se\"| __truncated__ NA \"99.423485687794994\" \"99.394364202899965\" ...\n $ X7                                                                                  : chr  \" Toplanan \\natık miktarı\\n (Ton) \\nAmount of\\nwaste collected (Tonnes) \" NA \"30283756.564639971\" \"665694.61099999992\" ...\n $ X8                                                                                  : chr  \"Kişi başı toplanan ortalama\\n atık miktarı (Kg/kişi-gün)\\nAmount of waste per capita (Kg/capita-day)\" NA \"1.0329906954638057\" \"0.80688141556067661\" ...\n\n\n\nData including the amounts of collected municipal waste that are sent to municipal landfills, waste processing facilities (the waste sent to landfill sites, incineration plants and all the waste recovery facilities), and disposed of using other methods (disposals by burning in an open area, dumping into river/onto land and burying.):\n\n\n\nShow the code\nwhere_to_municipal_waste &lt;- read.xlsx(\"project/data/where_to_municipal_waste.xlsx\")\nstr(where_to_municipal_waste)\n\n\n'data.frame':   94 obs. of  10 variables:\n $ Belediye.atık.yönetimi.istatistikleri,.2022.Municipal.waste.management.statistics,.2022: chr  \"İl\\nProvince\" NA \"Türkiye\" \"Adana\" ...\n $ X2                                                                                     : chr  \"Atık hizmeti \\nveren toplam \\nbelediye sayısı \\nTotal number of\\nmunicipalities providing\\nwaste services \" NA \"1389\" \"16\" ...\n $ X3                                                                                     : chr  \"Toplanan atık\\nmiktarı \\n(Ton)\\nTotal amount of waste collected \\n(Tonnes)\" NA \"30283756.564639971\" \"665694.61099999992\" ...\n $ X4                                                                                     : chr  \"Belediye çöplüğüne gönderilen\\nMunicipality's dumping sites \" \"Belediye sayısı \\nNumber of municipalities\" \"553\" \"0\" ...\n $ X5                                                                                     : chr  NA \"Atık\\nmiktarı (Ton)\\nAmount of\\n waste (Tonnes)\" \"4092721.2120000003\" \"0\" ...\n $ X6                                                                                     : chr  \"Atık işleme tesislerine\\n gönderilen(1)\\nWaste treatment facilities(1)\" \"Belediye sayısı \\nNumber of municipalities\" \"1002\" \"16\" ...\n $ X7                                                                                     : chr  NA \"Atık\\nmiktarı (Ton)\\nAmount of\\n waste (Tonnes)\" \"26016987.698640008\" \"663894.61100000003\" ...\n $ X8                                                                                     : num  NA NA NA NA NA NA NA NA NA NA ...\n $ X9                                                                                     : chr  \"Diğer bertaraf \\nyöntemleri(2)\\nOther disposal \\nmethods(2)\" \"Belediye sayısı\\nNumber of municipalities\" \"49\" \"1\" ...\n $ X10                                                                                    : chr  NA \"Atık\\nmiktarı (Ton)\\nAmount of\\n waste (Tonnes)\" \"174047.65400000001\" \"1800\" ...\n\n\n\nTime series data including municipal waste amounts, waste per capita, waste sent to processing facilities, etc., for the years 1994-2022:\n\n\n\nShow the code\ntime_series_municipal_waste &lt;- read.xlsx(\"project/data/time_series_municipal_waste.xlsx\", colNames = TRUE)\nstr(time_series_municipal_waste)\n\n\n'data.frame':   43 obs. of  19 variables:\n $ X1  : chr  \"Türkiye nüfusu\\nTurkey population\" \"Toplam belediye sayısı\\nTotal number of municipalities\" \"Toplam belediye nüfusu\\nTotal municipal population\" \"Atık hizmeti veren belediye sayısı\\nNumber of municipalities provided waste services\" ...\n $ 1994: chr  \"62810111\" \"2740\" \"47597657\" \"1985\" ...\n $ 1995: chr  \"62810111\" \"2801\" \"47774543\" \"2126\" ...\n $ 1996: chr  \"62810111\" \"2827\" \"47843698\" \"2172\" ...\n $ 1997: chr  \"62810111\" \"2835\" \"47865511\" \"2275\" ...\n $ 1998: chr  \"62810111\" \"2834\" \"47862511\" \"2579\" ...\n $ 2001: chr  \"67803927\" \"3227\" \"53407613\" \"2921\" ...\n $ 2002: chr  \"67803927\" \"3227\" \"53421379\" \"2984\" ...\n $ 2003: chr  \"67803927\" \"3227\" \"53430733\" \"3018\" ...\n $ 2004: chr  \"67803927\" \"3225\" \"53935050\" \"3028\" ...\n $ 2006: num  70586256 3225 58581515 3115 57451562 ...\n $ 2008: num  70586256 3225 58581515 3129 57800347 ...\n $ 2010: num  73722988 2950 61571332 2879 60946131 ...\n $ 2012: num  75627384 2950 63743047 2894 63105474 ...\n $ 2014: num  77695904 1396 72505107 1391 70843913 ...\n $ 2016: num  79814871 1397 74911343 1390 73854880 ...\n $ 2018: num  82003882 1399 76888607 1395 75952539 ...\n $ 2020: num  83614362 1389 78920614 1387 78204213 ...\n $ 2022: num  85279553 1391 80785141 1389 80319403 ...\n\n\n\nData on the types and amounts of waste collected annually in Ankara:\n\n\n\nShow the code\nAnkara_waste_type_year &lt;- read.xlsx(\"project/data/Ankara_waste_type_year.xlsx\")\nstr(Ankara_waste_type_year)\n\n\n'data.frame':   6 obs. of  5 variables:\n $ kg./.yıl: chr  \"20 01 34 Atık Pil \" \"08 03 17 Kartuş Toner atıkları \" \"Kağıt Karton Ambalaj\" \"Plastik Ambalaj\" ...\n $ 2019    : num  125 2631 19040 8710 5985 ...\n $ 2020    : num  52 2420 16040 7386 13763 ...\n $ 2021    : num  53 1860 23405 13794 8455 ...\n $ 2022    : num  0 250 1300 1210 1010 1020"
  },
  {
    "objectID": "project.html#reason-of-choice",
    "href": "project.html#reason-of-choice",
    "title": "STOP COMPLAINING, IT SOLVES NOTHING.",
    "section": "2.3 Reason of Choice ",
    "text": "2.3 Reason of Choice \nThis topic was chosen because it was realized that waste management is not given enough importance in Turkiye, and it is believed that carelessness should not continue in this matter. The importance of the subject is indisputable. By using the data sets mentioned above, it is aimed to reveal and analyze the current situation of waste management, to derive knowledge, and to contribute to the literature and our country."
  },
  {
    "objectID": "project.html#preprocessing",
    "href": "project.html#preprocessing",
    "title": "STOP COMPLAINING, IT SOLVES NOTHING.",
    "section": "2.4 Preprocessing ",
    "text": "2.4 Preprocessing \n\nFor “municipal_waste” dataset:\n\nDownloadable dataset in .RData version\n\n\nShow the code\nlibrary(tidyverse)\n\n\nWarning: package 'stringr' was built under R version 4.3.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nShow the code\n# remove unnecessary columns\nmunicipal_waste &lt;- select(municipal_waste, -X5)    \nmunicipal_waste &lt;- select(municipal_waste, -X6)\n# rename columns\nmunicipal_waste &lt;- rename(municipal_waste, \"Provinces\" =\"Belediye.atık.hizmeti.istatistikleri,.2022.Municipal.waste.services.statistics,.2022\")\nmunicipal_waste &lt;- rename(municipal_waste, \"Total municipal population\" = \"X2\")\nmunicipal_waste &lt;- rename(municipal_waste, \"Total number of municipalities\" =\"X3\")\nmunicipal_waste &lt;- rename(municipal_waste, \"Number of municipalities providing waste services\" =\"X4\")\nmunicipal_waste &lt;- rename(municipal_waste, \"Amount of waste collected (Tonnes) \n\" =\"X7\")\nmunicipal_waste &lt;- rename(municipal_waste, \"Amount of waste per capita (Kg/capita-day) \n\" =\"X8\")\n# remove unnecessary rows\nmunicipal_waste &lt;- municipal_waste[-c(1, 2, 85, 86, 87, 88), ]\n# reorder row names that is disordered\nrow.names(municipal_waste) &lt;- NULL\nmunicipal_waste &lt;- municipal_waste %&gt;%\n  mutate(row_id = row_number())  \nmunicipal_waste &lt;- municipal_waste %&gt;%\n  select(row_id, everything()) \nmunicipal_waste &lt;- municipal_waste[,-c(1)]\n# adjust necessary columns as numbers\nmunicipal_waste &lt;- municipal_waste %&gt;%\n  mutate(across(-Provinces, ~as.numeric(as.character(.))))\nsapply(municipal_waste,class)\n\n\n                                        Provinces \n                                      \"character\" \n                       Total municipal population \n                                        \"numeric\" \n                   Total number of municipalities \n                                        \"numeric\" \nNumber of municipalities providing waste services \n                                        \"numeric\" \n            Amount of waste collected (Tonnes) \\n \n                                        \"numeric\" \n    Amount of waste per capita (Kg/capita-day) \\n \n                                        \"numeric\" \n\n\nShow the code\nhead(municipal_waste)\n\n\n        Provinces Total municipal population Total number of municipalities\n1         Türkiye                   80785141                           1391\n2           Adana                    2274106                             16\n3        Adıyaman                     487642                             23\n4 Afyonkarahisar                      588048                             60\n5            Ağrı                     314539                             12\n6          Amasya                     256679                              8\n  Number of municipalities providing waste services\n1                                              1389\n2                                                16\n3                                                22\n4                                                60\n5                                                12\n6                                                 8\n  Amount of waste collected (Tonnes) \\n\n1                            30283756.6\n2                              665694.6\n3                              179724.1\n4                              198272.6\n5                              181116.0\n6                              111099.1\n  Amount of waste per capita (Kg/capita-day) \\n\n1                                     1.0329907\n2                                     0.8068814\n3                                     1.0190094\n4                                     0.9282235\n5                                     1.5796783\n6                                     1.1915254\n\n\nShow the code\nsummary(municipal_waste)\n\n\n  Provinces         Total municipal population Total number of municipalities\n Length:82          Min.   :   41120           Min.   :   4.00               \n Class :character   1st Qu.:  242100           1st Qu.:  11.00               \n Mode  :character   Median :  417945           Median :  16.00               \n                    Mean   : 1970369           Mean   :  33.93               \n                    3rd Qu.: 1139026           3rd Qu.:  21.00               \n                    Max.   :80785141           Max.   :1391.00               \n Number of municipalities providing waste services\n Min.   :   4.00                                  \n 1st Qu.:  11.00                                  \n Median :  16.00                                  \n Mean   :  33.88                                  \n 3rd Qu.:  21.00                                  \n Max.   :1389.00                                  \n Amount of waste collected (Tonnes) \\n\n Min.   :   21392                     \n 1st Qu.:   81725                     \n Median :  151235                     \n Mean   :  738628                     \n 3rd Qu.:  415882                     \n Max.   :30283757                     \n Amount of waste per capita (Kg/capita-day) \\n\n Min.   :0.6498                               \n 1st Qu.:0.8730                               \n Median :0.9672                               \n Mean   :1.0679                               \n 3rd Qu.:1.1887                               \n Max.   :1.9962                               \n\n\n\nFor “where_to_municipal_waste” dataset:\n\nDownloadable dataset in .RData version\n\n\nShow the code\nlibrary(tidyverse)\n# remove unnecessary columns\nwhere_to_municipal_waste &lt;- select(where_to_municipal_waste, -X2)    \nwhere_to_municipal_waste &lt;- select(where_to_municipal_waste, -X4)\nwhere_to_municipal_waste &lt;- select(where_to_municipal_waste, -X6)\nwhere_to_municipal_waste &lt;- select(where_to_municipal_waste, -X8)\nwhere_to_municipal_waste &lt;- select(where_to_municipal_waste, -X9)\n# rename columns\nwhere_to_municipal_waste &lt;- rename(where_to_municipal_waste, \"Provinces\" = `Belediye.atık.yönetimi.istatistikleri,.2022.Municipal.waste.management.statistics,.2022`)\nwhere_to_municipal_waste &lt;- rename(where_to_municipal_waste, \"Total amount of waste collected  (Tonnes)\" = \"X3\")\nwhere_to_municipal_waste &lt;- rename(where_to_municipal_waste, \"Municipality's dumping sites\" =\"X5\")\nwhere_to_municipal_waste &lt;- rename(where_to_municipal_waste, \"Waste treatment facilities\"= \"X7\")\nwhere_to_municipal_waste &lt;- rename(where_to_municipal_waste, \"Other disposal methods\"= \"X10\")\n# remove unnecessary rows\nwhere_to_municipal_waste &lt;- where_to_municipal_waste[-c(1, 2, 85:94), ]\n# reorder row names that is disordered\nrow.names(where_to_municipal_waste) &lt;- NULL\nwhere_to_municipal_waste &lt;- where_to_municipal_waste %&gt;%\n  mutate(row_id = row_number())  \nwhere_to_municipal_waste &lt;- where_to_municipal_waste %&gt;%\n  select(row_id, everything()) \nwhere_to_municipal_waste &lt;- where_to_municipal_waste[,-c(1)]\n# adjust necessary columns as numbers\nwhere_to_municipal_waste &lt;- where_to_municipal_waste %&gt;%\n  mutate(across(-Provinces, ~as.numeric(as.character(.))))\nsapply(where_to_municipal_waste,class)\n\n\n                                Provinces \n                              \"character\" \nTotal amount of waste collected  (Tonnes) \n                                \"numeric\" \n             Municipality's dumping sites \n                                \"numeric\" \n               Waste treatment facilities \n                                \"numeric\" \n                   Other disposal methods \n                                \"numeric\" \n\n\nShow the code\nhead(where_to_municipal_waste)\n\n\n       Provinces Total amount of waste collected  (Tonnes)\n1        Türkiye                                30283756.6\n2          Adana                                  665694.6\n3       Adıyaman                                  179724.1\n4 Afyonkarahisar                                  198272.6\n5           Ağrı                                  181116.0\n6         Amasya                                  111099.1\n  Municipality's dumping sites Waste treatment facilities\n1                   4092721.21                26016987.70\n2                         0.00                  663894.61\n3                    178453.00                    1271.15\n4                     20089.93                  175951.63\n5                    131116.00                   50000.00\n6                      1200.00                  109680.14\n  Other disposal methods\n1               174047.7\n2                 1800.0\n3                    0.0\n4                 2231.0\n5                    0.0\n6                  219.0\n\n\nShow the code\nsummary(where_to_municipal_waste)\n\n\n  Provinces         Total amount of waste collected  (Tonnes)\n Length:82          Min.   :   21392                         \n Class :character   1st Qu.:   81725                         \n Mode  :character   Median :  151235                         \n                    Mean   :  738628                         \n                    3rd Qu.:  415882                         \n                    Max.   :30283757                         \n Municipality's dumping sites Waste treatment facilities Other disposal methods\n Min.   :      0              Min.   :       0           Min.   :     0.0      \n 1st Qu.:   1260              1st Qu.:   52770           1st Qu.:     0.0      \n Median :  17376              Median :  109595           Median :     0.0      \n Mean   :  99822              Mean   :  634561           Mean   :  4245.1      \n 3rd Qu.:  56501              3rd Qu.:  333389           3rd Qu.:   557.5      \n Max.   :4092721              Max.   :26016988           Max.   :174047.6      \n\n\n\nFor “time_series_municipal_waste” dataset:\n\nDownloadable dataset in .RData version\n\n\nShow the code\nlibrary(tidyverse)\n# remove unnecessary rows\ntime_series_municipal_waste &lt;- time_series_municipal_waste[-c(2:6,10,14:43), ]\ntime_series_municipal_waste &lt;- rename(time_series_municipal_waste, \"Waste/Year\" = \"X1\")\n# rename rows\ntime_series_municipal_waste[1,1] &lt;- \"Turkey population\"\ntime_series_municipal_waste[2,1] &lt;- \"Amount of municipal waste generated (Thousand tonnes/year)\"\ntime_series_municipal_waste[3,1] &lt;- \"Amount of municipal waste collected (Thousand tonnes/year)\"\ntime_series_municipal_waste[4,1] &lt;- \"Average amount of municipal waste per capita (Kg/capita-day)\"\ntime_series_municipal_waste[5,1] &lt;- \"Waste treatment facilities\"\ntime_series_municipal_waste[6,1] &lt;- \"Municipality's dumping sites\"\ntime_series_municipal_waste[7,1] &lt;- \"Other disposal methods\"\n# reorder row names that is disordered\nrow.names(time_series_municipal_waste) &lt;- NULL\n# adjust necessary columns as numbers\ntime_series_municipal_waste &lt;- time_series_municipal_waste %&gt;%\n  mutate(across(-`Waste/Year`, ~as.numeric(as.character(.))))\nsapply(time_series_municipal_waste,class)\n\n\n Waste/Year        1994        1995        1996        1997        1998 \n\"character\"   \"numeric\"   \"numeric\"   \"numeric\"   \"numeric\"   \"numeric\" \n       2001        2002        2003        2004        2006        2008 \n  \"numeric\"   \"numeric\"   \"numeric\"   \"numeric\"   \"numeric\"   \"numeric\" \n       2010        2012        2014        2016        2018        2020 \n  \"numeric\"   \"numeric\"   \"numeric\"   \"numeric\"   \"numeric\"   \"numeric\" \n       2022 \n  \"numeric\" \n\n\nShow the code\nhead(time_series_municipal_waste)\n\n\n                                                    Waste/Year       1994\n1                                            Turkey population 62810111.0\n2   Amount of municipal waste generated (Thousand tonnes/year)    23448.0\n3   Amount of municipal waste collected (Thousand tonnes/year)    17757.0\n4 Average amount of municipal waste per capita (Kg/capita-day)        1.1\n5                                   Waste treatment facilities     1001.0\n6                                 Municipality's dumping sites    14479.0\n         1995        1996        1997        1998        2001        2002\n1 62810111.00 62810111.00 62810111.00 62810111.00 67803927.00 67803927.00\n2    27234.13    29347.98    31943.77    32972.89    31030.87    30999.26\n3    20910.00    22483.00    24180.00    24945.00    25134.00    25373.00\n4        1.27        1.37        1.46        1.51        1.35        1.34\n5     1603.00     3026.00     4544.00     5424.00     8522.00     7430.00\n6    17175.00    17520.00    16805.00    16853.00    14570.00    16310.00\n         2003        2004        2006        2008        2010        2012\n1 67803927.00 67803927.00 70586256.00 70586256.00 73722988.00 75627384.00\n2    31081.37    29736.10    30081.82    28454.00    29733.00    30786.00\n3    26118.00    25014.00    25280.00    24361.00    25277.00    25845.00\n4        1.38        1.31        1.21        1.15        1.14        1.12\n5     7758.00     7353.00     9683.00    11223.00    13941.00    15639.00\n6    16567.00    16416.00    14941.00    12678.00    11001.00     9772.00\n         2014         2016         2018         2020         2022\n1 77695904.00 7.981487e+07 8.200388e+07 8.361436e+07 8.527955e+07\n2    31230.00 3.376346e+04 3.453265e+04 3.475776e+04 3.242218e+04\n3    28011.00 3.158355e+04 3.220922e+04 3.232447e+04 3.028376e+04\n4        1.08 1.171626e+00 1.161837e+00 1.132422e+00 1.032991e+00\n5    17933.00 2.243038e+04 2.561468e+04 2.670724e+04 2.601700e+04\n6     9935.00 9.094906e+03 6.520657e+03 5.492803e+03 4.093000e+03\n\n\n\nFor “Ankara_waste_type_year” dataset: There is no need to preprocess the data\n\nDownloadable dataset in .RData version"
  },
  {
    "objectID": "project.html#exploratory-data-analysis",
    "href": "project.html#exploratory-data-analysis",
    "title": "STOP COMPLAINING, IT SOLVES NOTHING.",
    "section": "3.1 Exploratory Data Analysis ",
    "text": "3.1 Exploratory Data Analysis \n\n“The greatest value of a picture is when it forces us to notice what we never expected to see.” John W. Tukey\n\nFor “municipal_waste” dataset:\n\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(ggthemes)\n\n\nWarning: package 'ggthemes' was built under R version 4.3.2\n\n\nShow the code\nlibrary(ggrepel)\n\n\nWarning: package 'ggrepel' was built under R version 4.3.2\n\n\nShow the code\nmunicipal_waste &lt;- municipal_waste[-c(1), ]\n\np &lt;- municipal_waste |&gt; ggplot(aes(`Total municipal population`/10^5, \n`Amount of waste collected (Tonnes) \n`/10^4)) \np + geom_point(color = \"darkgreen\") + \nscale_x_continuous(trans = \"log10\") +\nscale_y_continuous(trans = \"log10\") +\nxlab(\"Total municipal population (log scale)\") +\nylab(\"Amount of waste collected (log scale)\") +\nggtitle(\"Amount of waste in Turkiye's provinces\")+ \n theme(line = element_blank(), rect = element_blank())\n\n\n\n\n\n\n\n\n\nShow the code\np &lt;- ggplot(municipal_waste, aes(x = reorder(Provinces, `Total number of municipalities`, FUN = sum), y = `Total number of municipalities`)) \np + geom_bar(stat = \"identity\", fill= \"purple\") + \n  xlab(\"Provinces\") +\n  theme_calc() +\n  ggtitle(\"Number of municipalities in provinces\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 6)) \n\n\n\n\n\n\n\n\n\nShow the code\n# The provinces that produce largest amount of waste\nThe_largest &lt;- municipal_waste |&gt; arrange(desc(`Amount of waste per capita (Kg/capita-day) \n`)) |&gt; head(n = 20)\np &lt;- ggplot(The_largest, aes(x = reorder(Provinces, `Amount of waste per capita (Kg/capita-day) \n`, FUN = sum),\n                             y = `Amount of waste per capita (Kg/capita-day) \n`))\nggplot(The_largest, aes(x =`Amount of waste per capita (Kg/capita-day) \n`, y = reorder(Provinces, `Amount of waste per capita (Kg/capita-day) \n`, FUN = sum), color = `Amount of waste per capita (Kg/capita-day) \n`)) +\n  geom_point(size = 4) +\n  geom_segment(aes(xend = 1, yend = Provinces), linewidth = 1) +\n  ylab(\"Provinces\") +\n  ggtitle(\"Provinces with the largest waste amount\")+\n  geom_text_repel(aes(label =`Total municipal population`), color = \"black\", size = 2)\n\n\n\n\n\n\n\n\n\n\nFor “where_to_municipal_waste” dataset:\nFor “time_series_municipal_waste” dataset:\nFor “Ankara_waste_type_year” dataset:"
  },
  {
    "objectID": "project.html#trend-analysis",
    "href": "project.html#trend-analysis",
    "title": "STOP COMPLAINING, IT SOLVES NOTHING.",
    "section": "3.2 Trend Analysis ",
    "text": "3.2 Trend Analysis"
  },
  {
    "objectID": "project.html#model-fitting",
    "href": "project.html#model-fitting",
    "title": "STOP COMPLAINING, IT SOLVES NOTHING.",
    "section": "3.3 Model Fitting ",
    "text": "3.3 Model Fitting"
  },
  {
    "objectID": "project.html#results",
    "href": "project.html#results",
    "title": "STOP COMPLAINING, IT SOLVES NOTHING.",
    "section": "3.4 Results ",
    "text": "3.4 Results"
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "My Assignments",
    "section": "",
    "text": "On this page, I showcase the assignment I conducted for the [term and year, e.g. Spring 2024] EMU660 Decision Making with Analytics course.\nPlease use left menu to navigate through my assignments.\n\n\n\n Back to top",
    "crumbs": [
      "My Assignments"
    ]
  },
  {
    "objectID": "about.html#employements",
    "href": "about.html#employements",
    "title": "About Me",
    "section": "Employements",
    "text": "Employements\n\nHacettepe University, Research Assistant, 2020 - ongoing."
  },
  {
    "objectID": "about.html#internships",
    "href": "about.html#internships",
    "title": "About Me",
    "section": "Internships",
    "text": "Internships\n\nLazzoni Furniture, Intern in Quality Department, August 2017\nAselsan, Intern in Production Planning and Control Department, July 2018\nTAI, Candidate Industrial Engineer, November 2018 - May 2019"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "My Blog",
    "section": "",
    "text": "This page is under construction.\n\n\n\n Back to top"
  },
  {
    "objectID": "docs/assignments/assignment-1.html",
    "href": "docs/assignments/assignment-1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "1 + 1\n\n[1] 2\n\n\nMy first assignment has two parts."
  },
  {
    "objectID": "assignments/assignment-1.html",
    "href": "assignments/assignment-1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "My first assignment has three parts.",
    "crumbs": [
      "Assignment 1"
    ]
  },
  {
    "objectID": "assignments/assignment-2.html",
    "href": "assignments/assignment-2.html",
    "title": "Assignment 2",
    "section": "",
    "text": "Assignment 2\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Assignment 2"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "{width=50%}"
  },
  {
    "objectID": "assignments/assignment-1.html#b",
    "href": "assignments/assignment-1.html#b",
    "title": "Assignment 1",
    "section": "(b)",
    "text": "(b)\n\nExploring Statistical Summaries of ‘mtcars’ dataset\n\n\nShow the code\ndata(mtcars)\ncustom_summary &lt;- function(x) {\n  list(mean = mean(x), median = median(x), stdev = sd(x), min = min(x), \n       max = max(x))\n}\nfor (i in names(mtcars)) {\n  cat(\"Column name:\", i,\"\\n\")\n  print(custom_summary(mtcars[[i]]))    #[i] returns a data frame; [[i]] returns the vector of that column\n}\n\n\nColumn name: mpg \n$mean\n[1] 20.09062\n\n$median\n[1] 19.2\n\n$stdev\n[1] 6.026948\n\n$min\n[1] 10.4\n\n$max\n[1] 33.9\n\nColumn name: cyl \n$mean\n[1] 6.1875\n\n$median\n[1] 6\n\n$stdev\n[1] 1.785922\n\n$min\n[1] 4\n\n$max\n[1] 8\n\nColumn name: disp \n$mean\n[1] 230.7219\n\n$median\n[1] 196.3\n\n$stdev\n[1] 123.9387\n\n$min\n[1] 71.1\n\n$max\n[1] 472\n\nColumn name: hp \n$mean\n[1] 146.6875\n\n$median\n[1] 123\n\n$stdev\n[1] 68.56287\n\n$min\n[1] 52\n\n$max\n[1] 335\n\nColumn name: drat \n$mean\n[1] 3.596563\n\n$median\n[1] 3.695\n\n$stdev\n[1] 0.5346787\n\n$min\n[1] 2.76\n\n$max\n[1] 4.93\n\nColumn name: wt \n$mean\n[1] 3.21725\n\n$median\n[1] 3.325\n\n$stdev\n[1] 0.9784574\n\n$min\n[1] 1.513\n\n$max\n[1] 5.424\n\nColumn name: qsec \n$mean\n[1] 17.84875\n\n$median\n[1] 17.71\n\n$stdev\n[1] 1.786943\n\n$min\n[1] 14.5\n\n$max\n[1] 22.9\n\nColumn name: vs \n$mean\n[1] 0.4375\n\n$median\n[1] 0\n\n$stdev\n[1] 0.5040161\n\n$min\n[1] 0\n\n$max\n[1] 1\n\nColumn name: am \n$mean\n[1] 0.40625\n\n$median\n[1] 0\n\n$stdev\n[1] 0.4989909\n\n$min\n[1] 0\n\n$max\n[1] 1\n\nColumn name: gear \n$mean\n[1] 3.6875\n\n$median\n[1] 4\n\n$stdev\n[1] 0.7378041\n\n$min\n[1] 3\n\n$max\n[1] 5\n\nColumn name: carb \n$mean\n[1] 2.8125\n\n$median\n[1] 2\n\n$stdev\n[1] 1.6152\n\n$min\n[1] 1\n\n$max\n[1] 8\n\n\nShow the code\nprint(apply(mtcars, 2, custom_summary))\n\n\n$mpg\n$mpg$mean\n[1] 20.09062\n\n$mpg$median\n[1] 19.2\n\n$mpg$stdev\n[1] 6.026948\n\n$mpg$min\n[1] 10.4\n\n$mpg$max\n[1] 33.9\n\n\n$cyl\n$cyl$mean\n[1] 6.1875\n\n$cyl$median\n[1] 6\n\n$cyl$stdev\n[1] 1.785922\n\n$cyl$min\n[1] 4\n\n$cyl$max\n[1] 8\n\n\n$disp\n$disp$mean\n[1] 230.7219\n\n$disp$median\n[1] 196.3\n\n$disp$stdev\n[1] 123.9387\n\n$disp$min\n[1] 71.1\n\n$disp$max\n[1] 472\n\n\n$hp\n$hp$mean\n[1] 146.6875\n\n$hp$median\n[1] 123\n\n$hp$stdev\n[1] 68.56287\n\n$hp$min\n[1] 52\n\n$hp$max\n[1] 335\n\n\n$drat\n$drat$mean\n[1] 3.596563\n\n$drat$median\n[1] 3.695\n\n$drat$stdev\n[1] 0.5346787\n\n$drat$min\n[1] 2.76\n\n$drat$max\n[1] 4.93\n\n\n$wt\n$wt$mean\n[1] 3.21725\n\n$wt$median\n[1] 3.325\n\n$wt$stdev\n[1] 0.9784574\n\n$wt$min\n[1] 1.513\n\n$wt$max\n[1] 5.424\n\n\n$qsec\n$qsec$mean\n[1] 17.84875\n\n$qsec$median\n[1] 17.71\n\n$qsec$stdev\n[1] 1.786943\n\n$qsec$min\n[1] 14.5\n\n$qsec$max\n[1] 22.9\n\n\n$vs\n$vs$mean\n[1] 0.4375\n\n$vs$median\n[1] 0\n\n$vs$stdev\n[1] 0.5040161\n\n$vs$min\n[1] 0\n\n$vs$max\n[1] 1\n\n\n$am\n$am$mean\n[1] 0.40625\n\n$am$median\n[1] 0\n\n$am$stdev\n[1] 0.4989909\n\n$am$min\n[1] 0\n\n$am$max\n[1] 1\n\n\n$gear\n$gear$mean\n[1] 3.6875\n\n$gear$median\n[1] 4\n\n$gear$stdev\n[1] 0.7378041\n\n$gear$min\n[1] 3\n\n$gear$max\n[1] 5\n\n\n$carb\n$carb$mean\n[1] 2.8125\n\n$carb$median\n[1] 2\n\n$carb$stdev\n[1] 1.6152\n\n$carb$min\n[1] 1\n\n$carb$max\n[1] 8\n\n\n\n\nShow the code\n# To be able to see the results in a dataframe:\nsummary_stats &lt;- sapply(mtcars, custom_summary)\nprint(summary_stats)\n\n\n       mpg      cyl      disp     hp       drat      wt        qsec    \nmean   20.09062 6.1875   230.7219 146.6875 3.596563  3.21725   17.84875\nmedian 19.2     6        196.3    123      3.695     3.325     17.71   \nstdev  6.026948 1.785922 123.9387 68.56287 0.5346787 0.9784574 1.786943\nmin    10.4     4        71.1     52       2.76      1.513     14.5    \nmax    33.9     8        472      335      4.93      5.424     22.9    \n       vs        am        gear      carb  \nmean   0.4375    0.40625   3.6875    2.8125\nmedian 0         0         4         2     \nstdev  0.5040161 0.4989909 0.7378041 1.6152\nmin    0         0         3         1     \nmax    1         1         5         8",
    "crumbs": [
      "Assignment 1"
    ]
  },
  {
    "objectID": "assignments/assignment-1.html#c",
    "href": "assignments/assignment-1.html#c",
    "title": "Assignment 1",
    "section": "(c)",
    "text": "(c)\n\nDisplaying and Manipulating the ‘na_example’ Dataset\n\n\nShow the code\nlibrary(dslabs)\ndata(na_example)\nna_example\n\n\n   [1]  2  1  3  2  1  3  1  4  3  2  2 NA  2  2  1  4 NA  1  1  2  1  2  2  1\n  [25]  2  5 NA  2  2  3  1  2  4  1  1  1  4  5  2  3  4  1  2  4  1  1  2  1\n  [49]  5 NA NA NA  1  1  5  1  3  1 NA  4  4  7  3  2 NA NA  1 NA  4  1  2  2\n  [73]  3  2  1  2  2  4  3  4  2  3  1  3  2  1  1  1  3  1 NA  3  1  2  2  1\n  [97]  2  2  1  1  4  1  1  2  3  3  2  2  3  3  3  4  1  1  1  2 NA  4  3  4\n [121]  3  1  2  1 NA NA NA NA  1  5  1  2  1  3  5  3  2  2 NA NA NA NA  3  5\n [145]  3  1  1  4  2  4  3  3 NA  2  3  2  6 NA  1  1  2  2  1  3  1  1  5 NA\n [169] NA  2  4 NA  2  5  1  4  3  3 NA  4  3  1  4  1  1  3  1  1 NA NA  3  5\n [193]  2  2  2  3  1  2  2  3  2  1 NA  2 NA  1 NA NA  2  1  1 NA  3 NA  1  2\n [217]  2  1  3  2  2  1  1  2  3  1  1  1  4  3  4  2  2  1  4  1 NA  5  1  4\n [241] NA  3 NA NA  1  1  5  2  3  3  2  4 NA  3  2  5 NA  2  3  4  6  2  2  2\n [265] NA  2 NA  2 NA  3  3  2  2  4  3  1  4  2 NA  2  4 NA  6  2  3  1 NA  2\n [289]  2 NA  1  1  3  2  3  3  1 NA  1  4  2  1  1  3  2  1  2  3  1 NA  2  3\n [313]  3  2  1  2  3  5  5  1  2  3  3  1 NA NA  1  2  4 NA  2  1  1  1  3  2\n [337]  1  1  3  4 NA  1  2  1  1  3  3 NA  1  1  3  5  3  2  3  4  1  4  3  1\n [361] NA  2  1  2  2  1  2  2  6  1  2  4  5 NA  3  4  2  1  1  4  2  1  1  1\n [385]  1  2  1  4  4  1  3 NA  3  3 NA  2 NA  1  2  1  1  4  2  1  4  4 NA  1\n [409]  2 NA  3  2  2  2  1  4  3  6  1  2  3  1  3  2  2  2  1  1  3  2  1  1\n [433]  1  3  2  2 NA  4  4  4  1  1 NA  4  3 NA  1  3  1  3  2  4  2  2  2  3\n [457]  2  1  4  3 NA  1  4  3  1  3  2 NA  3 NA  1  3  1  4  1  1  1  2  4  3\n [481]  1  2  2  2  3  2  3  1  1 NA  3  2  1  1  2 NA  2  2  2  3  3  1  1  2\n [505] NA  1  2  1  1  3  3  1  3  1  1  1  1  1  2  5  1  1  2  2  1  1 NA  1\n [529]  4  1  2  4  1  3  2 NA  1  1 NA  2  1  1  4  2  3  3  1  5  3  1  1  2\n [553] NA  1  1  3  1  3  2  4 NA  2  3  2  1  2  1  1  1  2  2  3  1  5  2 NA\n [577]  2 NA  3  2  2  2  1  5  3  2  3  1 NA  3  1  2  2  2  1  2  2  4 NA  6\n [601]  1  2 NA  1  1  2  2  3 NA  3  2  3  3  4  2 NA  2 NA  4 NA  1  1  2  2\n [625]  3  1  1  1  3 NA  2  5 NA  7  1 NA  4  3  3  1 NA  1  1  1  1  3  2  4\n [649]  2  2  3 NA NA  1  4  3  2  2  2  3  2  4  2  2  4 NA NA NA  6  3  3  1\n [673]  4  4  2  1 NA  1  6 NA  3  3  2  1  1  6 NA  1  5  1 NA  2  6  2 NA  4\n [697]  1  3  1  2 NA  1  1  3  1  2  4  2  1  3  2  4  3  2  2  1  1  5  6  4\n [721]  2  2  2  2  4 NA  1  2  2  2  2  4  5 NA NA NA  4  3  3  3  2  4  2  4\n [745] NA NA NA NA  2  1 NA  2  4  3  2 NA  2  3  1  3  4 NA  1  2  1  2 NA  3\n [769]  1  2  1  2  1  2  1  2  2  2  2  1  1  3  3  1  3  4  3 NA NA  4  2  3\n [793]  2  1  3  2  4  2  2  3  1  2  4  3  3  4 NA  1  4  2  1  1  1  3  1  5\n [817]  2  2  4  2 NA  1  3  1  2 NA  1  2  1  2  1 NA  1  3  2  3  2 NA  2  1\n [841]  4  2 NA NA NA  2  4  2 NA NA  3  1 NA  5  5  2  2  2 NA  2  1  3  1  3\n [865]  2  4  2  4 NA  4  1  2  3  2  3  3  2  3  2  2  2  1  3  2  4  2 NA  3\n [889]  3  2  2 NA NA  3  2  1  2  4  1  1  1  1  4  3  2 NA  3  2 NA  1 NA  3\n [913]  2  1  1  1  2 NA  2  2  3  3  2 NA NA  4  5  2  2  2  1  2  3  1  3  3\n [937]  4  3 NA  1  1  1 NA  4  3  5  1  1  2 NA  2  2  2  2  5  2  2  3  1  2\n [961]  3 NA  1  2 NA NA  2 NA  3  1  1  2  5  3  5  1  1  4 NA  2  1  3  1  1\n [985]  2  4  3  3  3 NA  1  1  2  2  1  1  2  2 NA  2\n\n\nShow the code\nstr(na_example)\n\n\n int [1:1000] 2 1 3 2 1 3 1 4 3 2 ...\n\n\n\n\nShow the code\ndata(na_example)\n\nnumber_NA &lt;- sum(is.na(na_example))\ncat(\"Number of NAs in the dataset: \", number_NA)\n\n\nNumber of NAs in the dataset:  145\n\n\n\n\nShow the code\ndata(na_example)\n\nnew_NA_example &lt;- replace(na_example, is.na(na_example), 660)\ncat(\"The new version of the dataset: \", new_NA_example)\n\n\nThe new version of the dataset:  2 1 3 2 1 3 1 4 3 2 2 660 2 2 1 4 660 1 1 2 1 2 2 1 2 5 660 2 2 3 1 2 4 1 1 1 4 5 2 3 4 1 2 4 1 1 2 1 5 660 660 660 1 1 5 1 3 1 660 4 4 7 3 2 660 660 1 660 4 1 2 2 3 2 1 2 2 4 3 4 2 3 1 3 2 1 1 1 3 1 660 3 1 2 2 1 2 2 1 1 4 1 1 2 3 3 2 2 3 3 3 4 1 1 1 2 660 4 3 4 3 1 2 1 660 660 660 660 1 5 1 2 1 3 5 3 2 2 660 660 660 660 3 5 3 1 1 4 2 4 3 3 660 2 3 2 6 660 1 1 2 2 1 3 1 1 5 660 660 2 4 660 2 5 1 4 3 3 660 4 3 1 4 1 1 3 1 1 660 660 3 5 2 2 2 3 1 2 2 3 2 1 660 2 660 1 660 660 2 1 1 660 3 660 1 2 2 1 3 2 2 1 1 2 3 1 1 1 4 3 4 2 2 1 4 1 660 5 1 4 660 3 660 660 1 1 5 2 3 3 2 4 660 3 2 5 660 2 3 4 6 2 2 2 660 2 660 2 660 3 3 2 2 4 3 1 4 2 660 2 4 660 6 2 3 1 660 2 2 660 1 1 3 2 3 3 1 660 1 4 2 1 1 3 2 1 2 3 1 660 2 3 3 2 1 2 3 5 5 1 2 3 3 1 660 660 1 2 4 660 2 1 1 1 3 2 1 1 3 4 660 1 2 1 1 3 3 660 1 1 3 5 3 2 3 4 1 4 3 1 660 2 1 2 2 1 2 2 6 1 2 4 5 660 3 4 2 1 1 4 2 1 1 1 1 2 1 4 4 1 3 660 3 3 660 2 660 1 2 1 1 4 2 1 4 4 660 1 2 660 3 2 2 2 1 4 3 6 1 2 3 1 3 2 2 2 1 1 3 2 1 1 1 3 2 2 660 4 4 4 1 1 660 4 3 660 1 3 1 3 2 4 2 2 2 3 2 1 4 3 660 1 4 3 1 3 2 660 3 660 1 3 1 4 1 1 1 2 4 3 1 2 2 2 3 2 3 1 1 660 3 2 1 1 2 660 2 2 2 3 3 1 1 2 660 1 2 1 1 3 3 1 3 1 1 1 1 1 2 5 1 1 2 2 1 1 660 1 4 1 2 4 1 3 2 660 1 1 660 2 1 1 4 2 3 3 1 5 3 1 1 2 660 1 1 3 1 3 2 4 660 2 3 2 1 2 1 1 1 2 2 3 1 5 2 660 2 660 3 2 2 2 1 5 3 2 3 1 660 3 1 2 2 2 1 2 2 4 660 6 1 2 660 1 1 2 2 3 660 3 2 3 3 4 2 660 2 660 4 660 1 1 2 2 3 1 1 1 3 660 2 5 660 7 1 660 4 3 3 1 660 1 1 1 1 3 2 4 2 2 3 660 660 1 4 3 2 2 2 3 2 4 2 2 4 660 660 660 6 3 3 1 4 4 2 1 660 1 6 660 3 3 2 1 1 6 660 1 5 1 660 2 6 2 660 4 1 3 1 2 660 1 1 3 1 2 4 2 1 3 2 4 3 2 2 1 1 5 6 4 2 2 2 2 4 660 1 2 2 2 2 4 5 660 660 660 4 3 3 3 2 4 2 4 660 660 660 660 2 1 660 2 4 3 2 660 2 3 1 3 4 660 1 2 1 2 660 3 1 2 1 2 1 2 1 2 2 2 2 1 1 3 3 1 3 4 3 660 660 4 2 3 2 1 3 2 4 2 2 3 1 2 4 3 3 4 660 1 4 2 1 1 1 3 1 5 2 2 4 2 660 1 3 1 2 660 1 2 1 2 1 660 1 3 2 3 2 660 2 1 4 2 660 660 660 2 4 2 660 660 3 1 660 5 5 2 2 2 660 2 1 3 1 3 2 4 2 4 660 4 1 2 3 2 3 3 2 3 2 2 2 1 3 2 4 2 660 3 3 2 2 660 660 3 2 1 2 4 1 1 1 1 4 3 2 660 3 2 660 1 660 3 2 1 1 1 2 660 2 2 3 3 2 660 660 4 5 2 2 2 1 2 3 1 3 3 4 3 660 1 1 1 660 4 3 5 1 1 2 660 2 2 2 2 5 2 2 3 1 2 3 660 1 2 660 660 2 660 3 1 1 2 5 3 5 1 1 4 660 2 1 3 1 1 2 4 3 3 3 660 1 1 2 2 1 1 2 2 660 2\n\n\n\n\nShow the code\nnew_NA_example &lt;- replace(na_example, is.na(na_example), 660)\n\nnumber_NA &lt;- sum(is.na(new_NA_example))\ncat(\"The number of NAs in the new version: \", number_NA)\n\n\nThe number of NAs in the new version:  0\n\n\n\n\nShow the code\nnew_NA_example &lt;- replace(na_example, is.na(na_example), 660)\n\nnumber_660 &lt;- sum(new_NA_example == 660)\ncat(\"The number of 660s in the new version: \", number_660)\n\n\nThe number of 660s in the new version:  145",
    "crumbs": [
      "Assignment 1"
    ]
  },
  {
    "objectID": "assignments/assignment-1.html#a",
    "href": "assignments/assignment-1.html#a",
    "title": "Assignment 1",
    "section": "(a)",
    "text": "(a)\n\nA brief summary of Mr. Vardar’s speech\nIn my opinion, Mr. Cem Vardar’s speech can be categorized into three main segments.\nFirstly, Mr Cem Vardar emphasises that Industrial Engineers have the necessary skills to use data science tools effectively and underlines the synergy between Industrial Engineering and data science applications. According to him, data analytics is a tool for problem-solving for Industrial Engineers.\nSecondly, Mr. Vardar highlights that the most effective designs in complex systems require simple solutions, even if complex solutions are necessary, they should start with simple beginnings.\nFinally, he discusses the Pareto Principle (80-20 principle), specifically mentioning that learning just 20% of skills related to data analytics, such as programming languages, data mining methods, or the use of cloud environments, will actually meet 80% of an Industrial Engineer’s needs.",
    "crumbs": [
      "Assignment 1"
    ]
  }
]