[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to my web page!",
    "section": "",
    "text": "My name is Dilara Akkus. I am a Ph.D. student and a research assistant in the Department of Industrial Engineering at Hacettepe University. I am extremely passionate about the fields of statistics, data science and machine learning.\n\n\n\n Back to top"
  },
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "STOP COMPLAINING, IT SOLVES NOTHING.",
    "section": "",
    "text": "My project will provide insights about waste management, which is of vital importance to the world and humanity. I hope to convey the awareness and perspective I wish to share with you, since change begins with awareness, and we have to change our way so that our children can live in the world they deserve!"
  },
  {
    "objectID": "project.html#data-source",
    "href": "project.html#data-source",
    "title": "STOP COMPLAINING, IT SOLVES NOTHING.",
    "section": "2.1 Data Source ",
    "text": "2.1 Data Source \nThe references from which I have gathered the data include:\n\nWaste Statistics, TURKSTAT\nEnvironment Regional Data, Biruni TURKSTAT\nAgriculture area, Biruni TURKSTAT\nEducation, Biruni TURKSTAT\nGDP, Biruni TURKSTAT\nElectricity consumption, Biruni TURKSTAT"
  },
  {
    "objectID": "project.html#general-information-about-data",
    "href": "project.html#general-information-about-data",
    "title": "STOP COMPLAINING, IT SOLVES NOTHING.",
    "section": "2.2 General Information About Data ",
    "text": "2.2 General Information About Data \n\nThe municipal waste amount data of Turkiye, which includes information such as the population of Turkiye and its 81 provinces’ municipalities, total waste amounts for the year 2022, the average waste amount per person, etc.:\n\n\n\nShow the code\nlibrary(openxlsx)\n\n\nWarning: package 'openxlsx' was built under R version 4.3.3\n\n\nShow the code\nmunicipal_waste &lt;- read.xlsx(\"project/data/municipal_waste.xlsx\")\nstr(municipal_waste)\n\n\n'data.frame':   88 obs. of  8 variables:\n $ Belediye.atık.hizmeti.istatistikleri,.2022.Municipal.waste.services.statistics,.2022: chr  NA \"İl\\nProvince\" \"Türkiye\" \"Adana\" ...\n $ X2                                                                                  : chr  \"Toplam belediye nüfusu\\nTotal municipal population\" NA \"80785141\" \"2274106\" ...\n $ X3                                                                                  : chr  \"Toplam belediye sayısı \\nTotal \\nnumber of municipalities  \" NA \"1391\" \"16\" ...\n $ X4                                                                                  : chr  \"Atık hizmeti veren belediye \\nsayısı\\nNumber of municipalities providing waste services \" NA \"1389\" \"16\" ...\n $ X5                                                                                  : chr  \"Atık hizmeti verilen belediye nüfusu\\nPopulation of municipalities served by waste services \" NA \"80319403.100000009\" \"2260333.2000000002\" ...\n $ X6                                                                                  : chr  \"Atık hizmeti\\nverilen belediye\\nnüfusunun\\ntoplam belediye\\nnüfusuna oranı (%)\\nRate of municipal population se\"| __truncated__ NA \"99.423485687794994\" \"99.394364202899965\" ...\n $ X7                                                                                  : chr  \" Toplanan \\natık miktarı\\n (Ton) \\nAmount of\\nwaste collected (Tonnes) \" NA \"30283756.564639971\" \"665694.61099999992\" ...\n $ X8                                                                                  : chr  \"Kişi başı toplanan ortalama\\n atık miktarı (Kg/kişi-gün)\\nAmount of waste per capita (Kg/capita-day)\" NA \"1.0329906954638057\" \"0.80688141556067661\" ...\n\n\n\nData including the amounts of collected municipal waste that are sent to municipal landfills, waste processing facilities (the waste sent to landfill sites, incineration plants and all the waste recovery facilities), and disposed of using other methods (disposals by burning in an open area, dumping into river/onto land and burying.):\n\n\n\nShow the code\nwhere_to_municipal_waste &lt;- read.xlsx(\"project/data/where_to_municipal_waste.xlsx\")\nstr(where_to_municipal_waste)\n\n\n'data.frame':   94 obs. of  10 variables:\n $ Belediye.atık.yönetimi.istatistikleri,.2022.Municipal.waste.management.statistics,.2022: chr  \"İl\\nProvince\" NA \"Türkiye\" \"Adana\" ...\n $ X2                                                                                     : chr  \"Atık hizmeti \\nveren toplam \\nbelediye sayısı \\nTotal number of\\nmunicipalities providing\\nwaste services \" NA \"1389\" \"16\" ...\n $ X3                                                                                     : chr  \"Toplanan atık\\nmiktarı \\n(Ton)\\nTotal amount of waste collected \\n(Tonnes)\" NA \"30283756.564639971\" \"665694.61099999992\" ...\n $ X4                                                                                     : chr  \"Belediye çöplüğüne gönderilen\\nMunicipality's dumping sites \" \"Belediye sayısı \\nNumber of municipalities\" \"553\" \"0\" ...\n $ X5                                                                                     : chr  NA \"Atık\\nmiktarı (Ton)\\nAmount of\\n waste (Tonnes)\" \"4092721.2120000003\" \"0\" ...\n $ X6                                                                                     : chr  \"Atık işleme tesislerine\\n gönderilen(1)\\nWaste treatment facilities(1)\" \"Belediye sayısı \\nNumber of municipalities\" \"1002\" \"16\" ...\n $ X7                                                                                     : chr  NA \"Atık\\nmiktarı (Ton)\\nAmount of\\n waste (Tonnes)\" \"26016987.698640008\" \"663894.61100000003\" ...\n $ X8                                                                                     : num  NA NA NA NA NA NA NA NA NA NA ...\n $ X9                                                                                     : chr  \"Diğer bertaraf \\nyöntemleri(2)\\nOther disposal \\nmethods(2)\" \"Belediye sayısı\\nNumber of municipalities\" \"49\" \"1\" ...\n $ X10                                                                                    : chr  NA \"Atık\\nmiktarı (Ton)\\nAmount of\\n waste (Tonnes)\" \"174047.65400000001\" \"1800\" ...\n\n\n\nTime series data including municipal waste amounts, waste per capita, waste sent to processing facilities, etc., for the years 1994-2022:\n\n\n\nShow the code\ntime_series_municipal_waste &lt;- read.xlsx(\"project/data/time_series_municipal_waste.xlsx\", colNames = TRUE)\nstr(time_series_municipal_waste)\n\n\n'data.frame':   43 obs. of  19 variables:\n $ X1  : chr  \"Türkiye nüfusu\\nTurkey population\" \"Toplam belediye sayısı\\nTotal number of municipalities\" \"Toplam belediye nüfusu\\nTotal municipal population\" \"Atık hizmeti veren belediye sayısı\\nNumber of municipalities provided waste services\" ...\n $ 1994: chr  \"62810111\" \"2740\" \"47597657\" \"1985\" ...\n $ 1995: chr  \"62810111\" \"2801\" \"47774543\" \"2126\" ...\n $ 1996: chr  \"62810111\" \"2827\" \"47843698\" \"2172\" ...\n $ 1997: chr  \"62810111\" \"2835\" \"47865511\" \"2275\" ...\n $ 1998: chr  \"62810111\" \"2834\" \"47862511\" \"2579\" ...\n $ 2001: chr  \"67803927\" \"3227\" \"53407613\" \"2921\" ...\n $ 2002: chr  \"67803927\" \"3227\" \"53421379\" \"2984\" ...\n $ 2003: chr  \"67803927\" \"3227\" \"53430733\" \"3018\" ...\n $ 2004: chr  \"67803927\" \"3225\" \"53935050\" \"3028\" ...\n $ 2006: num  70586256 3225 58581515 3115 57451562 ...\n $ 2008: num  70586256 3225 58581515 3129 57800347 ...\n $ 2010: num  73722988 2950 61571332 2879 60946131 ...\n $ 2012: num  75627384 2950 63743047 2894 63105474 ...\n $ 2014: num  77695904 1396 72505107 1391 70843913 ...\n $ 2016: num  79814871 1397 74911343 1390 73854880 ...\n $ 2018: num  82003882 1399 76888607 1395 75952539 ...\n $ 2020: num  83614362 1389 78920614 1387 78204213 ...\n $ 2022: num  85279553 1391 80785141 1389 80319403 ..."
  },
  {
    "objectID": "project.html#reason-of-choice",
    "href": "project.html#reason-of-choice",
    "title": "STOP COMPLAINING, IT SOLVES NOTHING.",
    "section": "2.3 Reason of Choice ",
    "text": "2.3 Reason of Choice \nThis topic was chosen because it was realized that waste management is not given enough importance in Turkiye, and it is believed that carelessness should not continue in this matter. The importance of the subject is indisputable. By using the data sets mentioned above, it is aimed to reveal and analyze the current situation of waste management, to derive knowledge, and to contribute to the literature and our country."
  },
  {
    "objectID": "project.html#preprocessing",
    "href": "project.html#preprocessing",
    "title": "STOP COMPLAINING, IT SOLVES NOTHING.",
    "section": "2.4 Preprocessing ",
    "text": "2.4 Preprocessing \n\nFor “municipal_waste” dataset:\n\nDownloadable dataset in .RData version\n\n\nShow the code\nlibrary(tidyverse)\n\n\nWarning: package 'stringr' was built under R version 4.3.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nShow the code\n# remove unnecessary columns\nmunicipal_waste &lt;- select(municipal_waste, -X5)    \nmunicipal_waste &lt;- select(municipal_waste, -X6)\n# rename columns\nmunicipal_waste &lt;- rename(municipal_waste, \"Provinces\" =\"Belediye.atık.hizmeti.istatistikleri,.2022.Municipal.waste.services.statistics,.2022\")\nmunicipal_waste &lt;- rename(municipal_waste, \"Total municipal population\" = \"X2\")\nmunicipal_waste &lt;- rename(municipal_waste, \"Total number of municipalities\" =\"X3\")\nmunicipal_waste &lt;- rename(municipal_waste, \"Number of municipalities providing waste services\" =\"X4\")\nmunicipal_waste &lt;- rename(municipal_waste, \"Amount of waste collected (Tonnes) \n\" =\"X7\")\nmunicipal_waste &lt;- rename(municipal_waste, \"Amount of waste per capita (Kg/capita-day) \n\" =\"X8\")\n# remove unnecessary rows\nmunicipal_waste &lt;- municipal_waste[-c(1, 2, 85, 86, 87, 88), ]\n# reorder row names that is disordered\nrow.names(municipal_waste) &lt;- NULL\nmunicipal_waste &lt;- municipal_waste %&gt;%\n  mutate(row_id = row_number())  \nmunicipal_waste &lt;- municipal_waste %&gt;%\n  select(row_id, everything()) \nmunicipal_waste &lt;- municipal_waste[,-c(1)]\n# adjust necessary columns as numbers\nmunicipal_waste &lt;- municipal_waste %&gt;%\n  mutate(across(-Provinces, ~as.numeric(as.character(.))))\nsapply(municipal_waste,class)\n\n\n                                        Provinces \n                                      \"character\" \n                       Total municipal population \n                                        \"numeric\" \n                   Total number of municipalities \n                                        \"numeric\" \nNumber of municipalities providing waste services \n                                        \"numeric\" \n            Amount of waste collected (Tonnes) \\n \n                                        \"numeric\" \n    Amount of waste per capita (Kg/capita-day) \\n \n                                        \"numeric\" \n\n\nThe first six rows of the municipal waste dataset are provided below.\n\n\nShow the code\nstr(municipal_waste)\n\n\n'data.frame':   82 obs. of  6 variables:\n $ Provinces                                        : chr  \"Türkiye\" \"Adana\" \"Adıyaman\" \"Afyonkarahisar\" ...\n $ Total municipal population                       : num  80785141 2274106 487642 588048 314539 ...\n $ Total number of municipalities                   : num  1391 16 23 60 12 ...\n $ Number of municipalities providing waste services: num  1389 16 22 60 12 ...\n $ Amount of waste collected (Tonnes) \n            : num  30283757 665695 179724 198273 181116 ...\n $ Amount of waste per capita (Kg/capita-day) \n    : num  1.033 0.807 1.019 0.928 1.58 ...\n\n\nThe descriptive statistics for each column are provided below.\n\n\nShow the code\nsummary(municipal_waste)\n\n\n  Provinces         Total municipal population Total number of municipalities\n Length:82          Min.   :   41120           Min.   :   4.00               \n Class :character   1st Qu.:  242100           1st Qu.:  11.00               \n Mode  :character   Median :  417945           Median :  16.00               \n                    Mean   : 1970369           Mean   :  33.93               \n                    3rd Qu.: 1139026           3rd Qu.:  21.00               \n                    Max.   :80785141           Max.   :1391.00               \n Number of municipalities providing waste services\n Min.   :   4.00                                  \n 1st Qu.:  11.00                                  \n Median :  16.00                                  \n Mean   :  33.88                                  \n 3rd Qu.:  21.00                                  \n Max.   :1389.00                                  \n Amount of waste collected (Tonnes) \\n\n Min.   :   21392                     \n 1st Qu.:   81725                     \n Median :  151235                     \n Mean   :  738628                     \n 3rd Qu.:  415882                     \n Max.   :30283757                     \n Amount of waste per capita (Kg/capita-day) \\n\n Min.   :0.6498                               \n 1st Qu.:0.8730                               \n Median :0.9672                               \n Mean   :1.0679                               \n 3rd Qu.:1.1887                               \n Max.   :1.9962                               \n\n\n\nFor “where_to_municipal_waste” dataset:\n\nDownloadable dataset in .RData version\n\n\nShow the code\nlibrary(tidyverse)\n# remove unnecessary columns\nwhere_to_municipal_waste &lt;- select(where_to_municipal_waste, -X2)    \nwhere_to_municipal_waste &lt;- select(where_to_municipal_waste, -X4)\nwhere_to_municipal_waste &lt;- select(where_to_municipal_waste, -X6)\nwhere_to_municipal_waste &lt;- select(where_to_municipal_waste, -X8)\nwhere_to_municipal_waste &lt;- select(where_to_municipal_waste, -X9)\n# rename columns\nwhere_to_municipal_waste &lt;- rename(where_to_municipal_waste, \"Provinces\" = `Belediye.atık.yönetimi.istatistikleri,.2022.Municipal.waste.management.statistics,.2022`)\nwhere_to_municipal_waste &lt;- rename(where_to_municipal_waste, \"Total amount of waste collected  (Tonnes)\" = \"X3\")\nwhere_to_municipal_waste &lt;- rename(where_to_municipal_waste, \"Municipality's dumping sites\" =\"X5\")\nwhere_to_municipal_waste &lt;- rename(where_to_municipal_waste, \"Waste treatment facilities\"= \"X7\")\nwhere_to_municipal_waste &lt;- rename(where_to_municipal_waste, \"Other disposal methods\"= \"X10\")\n# remove unnecessary rows\nwhere_to_municipal_waste &lt;- where_to_municipal_waste[-c(1, 2, 85:94), ]\n# reorder row names that is disordered\nrow.names(where_to_municipal_waste) &lt;- NULL\nwhere_to_municipal_waste &lt;- where_to_municipal_waste %&gt;%\n  mutate(row_id = row_number())  \nwhere_to_municipal_waste &lt;- where_to_municipal_waste %&gt;%\n  select(row_id, everything()) \nwhere_to_municipal_waste &lt;- where_to_municipal_waste[,-c(1)]\n# adjust necessary columns as numbers\nwhere_to_municipal_waste &lt;- where_to_municipal_waste %&gt;%\n  mutate(across(-Provinces, ~as.numeric(as.character(.))))\nsapply(where_to_municipal_waste,class)\n\n\n                                Provinces \n                              \"character\" \nTotal amount of waste collected  (Tonnes) \n                                \"numeric\" \n             Municipality's dumping sites \n                                \"numeric\" \n               Waste treatment facilities \n                                \"numeric\" \n                   Other disposal methods \n                                \"numeric\" \n\n\nThe first six rows of the dataset showing the distribution of municipal waste disposal methods are provided below.\n\n\nShow the code\nstr(where_to_municipal_waste)\n\n\n'data.frame':   82 obs. of  5 variables:\n $ Provinces                                : chr  \"Türkiye\" \"Adana\" \"Adıyaman\" \"Afyonkarahisar\" ...\n $ Total amount of waste collected  (Tonnes): num  30283757 665695 179724 198273 181116 ...\n $ Municipality's dumping sites             : num  4092721 0 178453 20090 131116 ...\n $ Waste treatment facilities               : num  26016988 663895 1271 175952 50000 ...\n $ Other disposal methods                   : num  174048 1800 0 2231 0 ...\n\n\nThe descriptive statistics for each column are provided below.\n\n\nShow the code\nsummary(where_to_municipal_waste)\n\n\n  Provinces         Total amount of waste collected  (Tonnes)\n Length:82          Min.   :   21392                         \n Class :character   1st Qu.:   81725                         \n Mode  :character   Median :  151235                         \n                    Mean   :  738628                         \n                    3rd Qu.:  415882                         \n                    Max.   :30283757                         \n Municipality's dumping sites Waste treatment facilities Other disposal methods\n Min.   :      0              Min.   :       0           Min.   :     0.0      \n 1st Qu.:   1260              1st Qu.:   52770           1st Qu.:     0.0      \n Median :  17376              Median :  109595           Median :     0.0      \n Mean   :  99822              Mean   :  634561           Mean   :  4245.1      \n 3rd Qu.:  56501              3rd Qu.:  333389           3rd Qu.:   557.5      \n Max.   :4092721              Max.   :26016988           Max.   :174047.6      \n\n\n\nFor “time_series_municipal_waste” dataset and “ts_province” dataset:\n\nDownloadable dataset in .RData version\n\n\nShow the code\nlibrary(tidyverse)\n# remove unnecessary rows\ntime_series_municipal_waste &lt;- time_series_municipal_waste[-c(2:6,10,14:43), ]\ntime_series_municipal_waste &lt;- rename(time_series_municipal_waste, \"Waste/Year\" = \"X1\")\n# rename rows\ntime_series_municipal_waste[1,1] &lt;- \"Turkey population\"\ntime_series_municipal_waste[2,1] &lt;- \"Amount of municipal waste generated (Thousand tonnes/year)\"\ntime_series_municipal_waste[3,1] &lt;- \"Amount of municipal waste collected (Thousand tonnes/year)\"\ntime_series_municipal_waste[4,1] &lt;- \"Average amount of municipal waste per capita (Kg/capita-day)\"\ntime_series_municipal_waste[5,1] &lt;- \"Waste treatment facilities\"\ntime_series_municipal_waste[6,1] &lt;- \"Municipality's dumping sites\"\ntime_series_municipal_waste[7,1] &lt;- \"Other disposal methods\"\n# reorder row names that is disordered\nrow.names(time_series_municipal_waste) &lt;- NULL\n# adjust necessary columns as numbers\ntime_series_municipal_waste &lt;- time_series_municipal_waste %&gt;%\n  mutate(across(-`Waste/Year`, ~as.numeric(as.character(.))))\nsapply(time_series_municipal_waste,class)\n\n\n Waste/Year        1994        1995        1996        1997        1998 \n\"character\"   \"numeric\"   \"numeric\"   \"numeric\"   \"numeric\"   \"numeric\" \n       2001        2002        2003        2004        2006        2008 \n  \"numeric\"   \"numeric\"   \"numeric\"   \"numeric\"   \"numeric\"   \"numeric\" \n       2010        2012        2014        2016        2018        2020 \n  \"numeric\"   \"numeric\"   \"numeric\"   \"numeric\"   \"numeric\"   \"numeric\" \n       2022 \n  \"numeric\" \n\n\nThe attributes of the time series dataset are provided below.\n\n\nShow the code\nstr(time_series_municipal_waste)\n\n\n'data.frame':   7 obs. of  19 variables:\n $ Waste/Year: chr  \"Turkey population\" \"Amount of municipal waste generated (Thousand tonnes/year)\" \"Amount of municipal waste collected (Thousand tonnes/year)\" \"Average amount of municipal waste per capita (Kg/capita-day)\" ...\n $ 1994      : num  6.28e+07 2.34e+04 1.78e+04 1.10 1.00e+03 ...\n $ 1995      : num  6.28e+07 2.72e+04 2.09e+04 1.27 1.60e+03 ...\n $ 1996      : num  6.28e+07 2.93e+04 2.25e+04 1.37 3.03e+03 ...\n $ 1997      : num  6.28e+07 3.19e+04 2.42e+04 1.46 4.54e+03 ...\n $ 1998      : num  6.28e+07 3.30e+04 2.49e+04 1.51 5.42e+03 ...\n $ 2001      : num  6.78e+07 3.10e+04 2.51e+04 1.35 8.52e+03 ...\n $ 2002      : num  6.78e+07 3.10e+04 2.54e+04 1.34 7.43e+03 ...\n $ 2003      : num  6.78e+07 3.11e+04 2.61e+04 1.38 7.76e+03 ...\n $ 2004      : num  6.78e+07 2.97e+04 2.50e+04 1.31 7.35e+03 ...\n $ 2006      : num  7.06e+07 3.01e+04 2.53e+04 1.21 9.68e+03 ...\n $ 2008      : num  7.06e+07 2.85e+04 2.44e+04 1.15 1.12e+04 ...\n $ 2010      : num  7.37e+07 2.97e+04 2.53e+04 1.14 1.39e+04 ...\n $ 2012      : num  7.56e+07 3.08e+04 2.58e+04 1.12 1.56e+04 ...\n $ 2014      : num  7.77e+07 3.12e+04 2.80e+04 1.08 1.79e+04 ...\n $ 2016      : num  7.98e+07 3.38e+04 3.16e+04 1.17 2.24e+04 ...\n $ 2018      : num  8.20e+07 3.45e+04 3.22e+04 1.16 2.56e+04 ...\n $ 2020      : num  8.36e+07 3.48e+04 3.23e+04 1.13 2.67e+04 ...\n $ 2022      : num  8.53e+07 3.24e+04 3.03e+04 1.03 2.60e+04 ...\n\n\nThe attributes of the provinces’ time series dataset are provided below.\n\n\nShow the code\nts_province  &lt;- select(ts_province , -BÖLGE.KODU)  \nts_province  &lt;- rename(ts_province , \"Year\" = YIL)\nts_province  &lt;- rename(ts_province , \"Province\" = BÖLGE.ADI)\nts_province  &lt;- rename(ts_province , \"Waste amount (1000 ton)\" = `Belediye.atık.istatistikleri.:.Toplanan.atık.miktarı.(1000.ton)`)\nts_province$Year &lt;- as.numeric(ts_province$Year)\nts_province$`Waste amount (1000 ton)` &lt;- as.numeric(ts_province$`Waste amount (1000 ton)`)\n\n\nWarning: Zorlamadan dolayı ortaya çıkan NAs\n\n\nShow the code\nstr(ts_province)\n\n\n'data.frame':   1134 obs. of  3 variables:\n $ Year                   : num  1998 2001 2002 2003 2004 ...\n $ Province               : chr  \"İstanbul\" \"İstanbul\" \"İstanbul\" \"İstanbul\" ...\n $ Waste amount (1000 ton): num  6074 6112 5231 5375 4471 ..."
  },
  {
    "objectID": "project.html#exploratory-data-analysis",
    "href": "project.html#exploratory-data-analysis",
    "title": "STOP COMPLAINING, IT SOLVES NOTHING.",
    "section": "3.1 Exploratory Data Analysis ",
    "text": "3.1 Exploratory Data Analysis \nFor “municipal_waste” dataset:\nThe relationship between the population size of Turkiye provinces and the amount of waste generated is shown in the scatter plot below. According to the plot, a linear relationship is observed between them.\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(ggthemes)\n\n\nWarning: package 'ggthemes' was built under R version 4.3.2\n\n\nShow the code\nlibrary(ggrepel)\n\n\nWarning: package 'ggrepel' was built under R version 4.3.2\n\n\nShow the code\nmunicipal_waste &lt;- municipal_waste[-c(1), ]\n\np &lt;- municipal_waste |&gt; ggplot(aes(`Total municipal population`/10^6, \n`Amount of waste collected (Tonnes) \n`/10^4)) \np + geom_point(color = \"skyblue\") + \nscale_x_continuous(trans = \"log10\") +\nscale_y_continuous(trans = \"log10\") +\nxlab(\"Total municipal population (million)\") +\nylab(\"Amount of waste collected (kg)\") +\nggtitle(\"Amount of waste in Turkiye's provinces\")+ \ntheme_classic()\n\n\n\n\n\n\n\n\n\nProvinces ranked according to the total number of municipalities can be seen in the below graph together with the number of municipalities.\n\n\nShow the code\np &lt;- ggplot(municipal_waste, aes(x = reorder(Provinces, `Total number of municipalities`, FUN = sum), y = `Total number of municipalities`)) \np + geom_bar(stat = \"identity\", fill= \"purple\") + \n  xlab(\"Provinces\") +\n  theme_calc() +\n  ggtitle(\"Number of municipalities in provinces\") + \n  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 6)) \n\n\n\n\n\n\n\n\n\nIn the plot below, the first 20 provinces with the highest amount of waste per capita and their populations can be found.\n\n\nShow the code\n# The provinces that produce largest amount of waste\nThe_largest &lt;- municipal_waste |&gt; arrange(desc(`Amount of waste per capita (Kg/capita-day) \n`)) |&gt; head(n = 20)\np &lt;- ggplot(The_largest, aes(x = reorder(Provinces, `Amount of waste per capita (Kg/capita-day) \n`, FUN = sum),\n                             y = `Amount of waste per capita (Kg/capita-day) \n`))\nggplot(The_largest, aes(x =`Amount of waste per capita (Kg/capita-day) \n`, y = reorder(Provinces, `Amount of waste per capita (Kg/capita-day) \n`, FUN = sum), color = `Amount of waste per capita (Kg/capita-day) \n`)) +\n  geom_point(size = 4) +\n  geom_segment(aes(xend = 1, yend = Provinces), linewidth = 1) + \n  ylab(\"Provinces\") +\n  ggtitle(\"Provinces with the largest waste amount\")+\n  geom_text_repel(aes(label =`Total municipal population`), color = \"black\", size = 2)\n\n\n\n\n\n\n\n\n\nFor “where_to_municipal_waste” dataset:\nThe distribution of waste collected by municipalities according to three disposal methods and provinces is analysed in this section.\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(ggrepel)\nlibrary(dplyr)\n\ndumping_site &lt;-where_to_municipal_waste |&gt; \n  mutate(proportion1 = `Municipality's dumping sites`/`Total amount of waste collected  (Tonnes)`)\ntreatment_facility &lt;-where_to_municipal_waste |&gt; \n  mutate(proportion2 =`Waste treatment facilities`/`Total amount of waste collected  (Tonnes)`)\nother_disposal &lt;-where_to_municipal_waste |&gt; \n  mutate(proportion3 =`Other disposal methods`/`Total amount of waste collected  (Tonnes)`)\n\n\nThe amount of waste allocated for the municipality dumping site can be seen below, plotted by province, with circle diameters representing the total amount of waste.\n\n\nShow the code\n# Dumping site proportion graph\ndumping_site &lt;- dumping_site[-c(1), ]\nggplot(dumping_site, aes(Provinces, proportion1, size =`Total amount of waste collected  (Tonnes)`/ 10^4)) +\n  geom_point(color = \"blue\", alpha = 0.6) + theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 6)) +\n  labs (x = \"Provinces\",y = \"Proportion for dumping site\", title = \"Proportion of wastes sent\", size = \"Total waste (kg)\") +  coord_cartesian(ylim = c(0, 1))\n\n\n\n\n\n\n\n\n\nThe amount of waste allocated for the waste treatment facilities can be seen below, plotted by province, with circle diameters representing the total amount of waste.\n\n\nShow the code\n# Waste treatment facility proportion graph\ntreatment_facility &lt;- treatment_facility[-c(1), ]\nggplot(treatment_facility, aes(Provinces, proportion2, size =`Total amount of waste collected  (Tonnes)`/ 10^4)) +\n  geom_point(color = \"orange\", alpha = 0.6) +  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 6)) +\n  labs (x = \"Provinces\",y = \"Proportion for waste treatment facility\", title = \"Proportion of wastes sent\", size = \"Total waste (kg)\") + coord_cartesian(ylim = c(0, 1)) \n\n\n\n\n\n\n\n\n\nThe amount of waste allocated for the other disposal methods can be seen below, plotted by province, with circle diameters representing the total amount of waste.\n\n\nShow the code\n# Other disposal methods proportion graph\nother_disposal &lt;- other_disposal[-c(1), ]\nggplot(other_disposal, aes(Provinces, proportion3, size =`Total amount of waste collected  (Tonnes)`/ 10^4)) +\n  geom_point(color = \"darkgreen\", alpha = 0.6) + theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 6)) +\n  labs (x = \"Provinces\",y = \"Pro. for other disposal methods\", title = \"Proportion of wastes sent\", size = \"Total waste (kg)\") + coord_cartesian(ylim = c(0, 1))\n\n\n\n\n\n\n\n\n\nThe pie chart below shows a rough breakdown of the amount of waste sent to these three disposal methods.\n\n\nShow the code\n# Pie Chart\nwaste_distr &lt;- data.frame(Method = c(\"Municipality's Dumping Site\", \"Waste Treatment Facilities\", \"Other Disposal Methods\"), Amount = c(where_to_municipal_waste[1,3]/where_to_municipal_waste[1,2], where_to_municipal_waste[1,4]/where_to_municipal_waste[1,2], where_to_municipal_waste[1,5]/where_to_municipal_waste[1,2]))\nggplot(waste_distr, aes(x = \"\", y = Amount, fill = Method)) + \n  geom_bar(width = 1, stat = \"identity\") + \n  coord_polar(theta = \"y\") + \n  theme_void() +\n  labs(title = \"Waste Disposal Methods\", fill = \"Disposal Method\")\n\n\n\n\n\n\n\n\n\nFor “time_series_municipal_waste” dataset and “ts_province” dataset:\nAccording to the time series data set, Turkiye’s population change over the years is given below.\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(ggrepel)\nlibrary(dplyr)\n\nts_data &lt;- time_series_municipal_waste %&gt;%\n  pivot_longer(cols = -`Waste/Year`, names_to = \"Year\", values_to = \"Value\") %&gt;%\n  mutate(Year = as.numeric(Year))  \n\n# Türkiye population ts\nggplot(ts_data %&gt;% filter(`Waste/Year` == \"Turkey population\"), \n                          aes(x = Year, y = Value / 10^6)) +\n  geom_line(color = \"blue\") +\n  geom_point(color = \"magenta\") +\n  theme_bw() + coord_fixed() +\n  labs(title = \"Turkiye Population Over the Years\", x = \"Year\", y = \"Population (million)\")\n\n\n\n\n\n\n\n\n\nThe relationship between the total amount of waste generated in Turkey and the amount collected by municipalities for proper disposal can be accessed from the plot.\n\n\nShow the code\n# Waste graphs\nts_data2 &lt;- ts_data %&gt;%\n  filter(`Waste/Year` %in% c(\"Amount of municipal waste generated (Thousand tonnes/year)\", \n                             \"Amount of municipal waste collected (Thousand tonnes/year)\")) %&gt;%\n  mutate(Type = case_when(\n    `Waste/Year` == \"Amount of municipal waste generated (Thousand tonnes/year)\" ~ \"Generated\",\n    `Waste/Year` == \"Amount of municipal waste collected (Thousand tonnes/year)\" ~ \"Collected\"\n  ))\n\nggplot(ts_data2, aes(x = Year, y = Value, color = Type, group = Type)) +\n  geom_line() +\n  geom_point() +\n  scale_color_manual(values = c(\"Generated\" = \"green\", \"Collected\" = \"purple\")) +\n  labs(title = \"Municipal Waste Generated and Collected Over the Years\",\n       x = \"Year\", \n       y = \"Waste (Thousand tonnes)\",\n       color = \"Type\") + \n  theme_minimal()\n\n\n\n\n\n\n\n\n\nChanges in waste amount over the years according to disposal methods are given below.\n\n\nShow the code\ndisposal_methods_data &lt;- ts_data %&gt;%\n  filter(`Waste/Year` %in% c(\"Waste treatment facilities\", \n                             \"Municipality's dumping sites\", \n                             \"Other disposal methods\")) %&gt;%\n  mutate(Type = case_when(\n    `Waste/Year` == \"Waste treatment facilities\" ~ \"Waste Treatment\",\n    `Waste/Year` == \"Municipality's dumping sites\" ~ \"Dumping Sites\",\n    `Waste/Year` == \"Other disposal methods\" ~ \"Other Methods\"\n  ))\n\nggplot(disposal_methods_data, aes(x = Year, y = Value, color = Type, group = Type)) +\n  geom_line() +\n  geom_point() +\n  scale_color_manual(values = c(\"Waste Treatment\" = \"blue\", \"Dumping Sites\" = \"red\", \"Other Methods\" = \"green\")) +\n  labs(title = \"Disposal Methods Over the Years\",\n       x = \"Year\", \n       y = \"Amount (Thousand tonnes)\",\n       color = \"Method\") +\n  theme_classic()\n\n\n\n\n\n\n\n\n\nDescriptive statistics for waste amounts by province dataset:\n\n\nShow the code\nsummary_stats &lt;- ts_province %&gt;%\n  group_by(Province) %&gt;%\n  summarise(\n    mean_waste = mean(`Waste amount (1000 ton)`, na.rm = TRUE),\n    median_waste = median(`Waste amount (1000 ton)`, na.rm = TRUE),\n    sd_waste = sd(`Waste amount (1000 ton)`, na.rm = TRUE),\n    min_waste = min(`Waste amount (1000 ton)`, na.rm = TRUE),\n    max_waste = max(`Waste amount (1000 ton)`, na.rm = TRUE)\n  ) %&gt;%\n  arrange(desc(mean_waste)) %&gt;%\n  top_n(10, mean_waste)\nprint(summary_stats)\n\n\n# A tibble: 10 × 6\n   Province mean_waste median_waste sd_waste min_waste max_waste\n   &lt;chr&gt;         &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1 İstanbul      5879.        5898     824.       4471      7043\n 2 Ankara        2182.        2204.    158.       1881      2363\n 3 İzmir         1654.        1538.    336.       1329      2337\n 4 Antalya        948.         872.    239.        666      1341\n 5 Bursa          879          854.    203.        618      1181\n 6 Konya          756.         740.     84.7       643       921\n 7 Adana          731.         734      63.6       614       826\n 8 Mersin         613.         595      97.8       453       819\n 9 Kocaeli        539.         534     110.        380       713\n10 Muğla          529.         528.     99.9       397       677\n\n\nThe line graph of waste amounts over the years for the top 5 cities producing the most waste based on provincial waste amount data is drawn.\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(ggthemes)\nmean_waste &lt;- ts_province %&gt;%\n  group_by(Province) %&gt;%\n  summarise(mean_waste = mean(`Waste amount (1000 ton)`, na.rm = TRUE)) %&gt;%\n  arrange(desc(mean_waste))\n\ntop5_provinces &lt;- mean_waste %&gt;%\n  top_n(5, mean_waste) %&gt;%\n  pull(Province)\n\ntop5_data &lt;- ts_province %&gt;%\n  filter(Province %in% top5_provinces)\n\nggplot(top5_data, aes(x = Year, y = `Waste amount (1000 ton)`, color = Province)) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Waste Amount in Top 5 Provinces with Largest Mean Waste Amount\",\n       x = \"Year\",\n       y = \"Waste Amount (1000 ton)\") +\n  theme_pander()\n\n\n\n\n\n\n\n\n\nThe box plot for the top 10 provinces with the highest average waste amounts is provided below.\n\n\nShow the code\ntop10_summary &lt;- ts_province %&gt;%\n  group_by(Province) %&gt;%\n  summarise(mean_waste = mean(`Waste amount (1000 ton)`, na.rm = TRUE)) %&gt;%\n  arrange(desc(mean_waste)) %&gt;%\n  top_n(10, mean_waste)\n\ntop10_provinces &lt;- top10_summary$Province\ntop10_data &lt;- ts_province %&gt;%\n  filter(Province %in% top10_provinces)\n\ntop10_data &lt;- top10_data %&gt;%\n  mutate(Province = factor(Province, levels = top10_summary$Province[order(top10_summary$mean_waste)]))\n\nggplot(top10_data, aes(x = Province, y = `Waste amount (1000 ton)`, fill = Province)) +\n  geom_boxplot() +\n  labs(title = \"Waste Amounts by Province (Top 10 Provinces)\",\n       x = \"Province\",\n       y = \"Waste Amount (1000 ton)\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\n\n\n\n\nWhen İstanbul, which was very dominant in the previous boxplot, is excluded, the results are also examined.\n\n\nShow the code\nts_province_no_istanbul &lt;- ts_province %&gt;% filter(Province != \"İstanbul\")\ntop10_summary_no_istanbul &lt;- ts_province_no_istanbul %&gt;%\n  group_by(Province) %&gt;%\n  summarise(mean_waste = mean(`Waste amount (1000 ton)`, na.rm = TRUE)) %&gt;%\n  arrange(desc(mean_waste)) %&gt;%\n  top_n(10, mean_waste)\n\ntop10_provinces_no_istanbul &lt;- top10_summary_no_istanbul$Province\ntop10_data_no_istanbul &lt;- ts_province_no_istanbul %&gt;%\n  filter(Province %in% top10_provinces_no_istanbul)\n\ntop10_data_no_istanbul &lt;- top10_data_no_istanbul %&gt;%\n  mutate(Province = factor(Province, levels = top10_summary_no_istanbul$Province[order(top10_summary_no_istanbul$mean_waste)]))\n\nggplot(top10_data_no_istanbul, aes(x = Province, y = `Waste amount (1000 ton)`, fill = Province)) +\n  geom_boxplot() +\n  labs(title = \"Waste Amounts by Province (Top 10 Provinces, Excluding İstanbul)\",\n       x = \"Province\",\n       y = \"Waste Amount (1000 ton)\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))"
  },
  {
    "objectID": "project.html#trend-analysis",
    "href": "project.html#trend-analysis",
    "title": "STOP COMPLAINING, IT SOLVES NOTHING.",
    "section": "3.2 Trend Analysis ",
    "text": "3.2 Trend Analysis \n\n\nShow the code\n# install.packages(\"GreyModel\")\n# library(ggplot2)\n# library(GreyModel)\n# \n# # Extract the 'Amount of municipal waste collected' row and its values\n# collected_waste &lt;- time_series_municipal_waste[3, -1]\n# years &lt;- as.numeric(colnames(collected_waste))\n# # Replace missing years with NaN\n# full_years &lt;- seq(min(years), max(years))\n# full_collected_waste &lt;- rep(NA, length(full_years))\n# names(full_collected_waste) &lt;- full_years\n# for (year in years) {\n#     full_collected_waste[as.character(year)] = collected_waste[as.character(year)]\n# }\n# # Fill missing values by linear interpolation\n# full_collected_waste &lt;- zoo::na.approx(full_collected_waste, na.rm = FALSE)\n# \n# # Convert to time series\n# waste_ts &lt;- ts(full_collected_waste, start=min(full_years), frequency=1)\n# waste_df &lt;- data.frame(\n#   Year = as.numeric(time(waste_ts)),\n#   WasteAmount = as.numeric(waste_ts)\n# )\n# GM_test(waste_ts)\n# grey_model &lt;- GM(waste_ts)\n# forecast_values &lt;- fcast_grey(waste_ts,  5)  # Adjust the number as needed\n# \n# # Plot time series data\n# p &lt;- ggplot(data = waste_df, aes(x = Year, y = WasteAmount)) +\n#   geom_line(color = \"blue\") +\n#   geom_point(color = \"blue\") +\n#   labs(title = \"Municipal Waste Collection Time Series\",\n#        x = \"Year\",\n#        y = \"Amount of Waste Collected\") +\n#   theme_minimal() +\n#   theme(plot.title = element_text(hjust = 0.5))\n\n# # Add forecasted values\n# forecast_df &lt;- data.frame(Year = (max(waste_df$Year) + 1):(max(waste_df$Year) + length(forecast_values)),\n#                           Forecast = forecast_values)\n# \n# # Add forecast line to the plot\n# p + geom_line(data = forecast_df, aes(x = Year, y = Forecast), color = \"red\", linetype = \"dashed\")"
  },
  {
    "objectID": "project.html#model-fitting",
    "href": "project.html#model-fitting",
    "title": "STOP COMPLAINING, IT SOLVES NOTHING.",
    "section": "3.3 Model Fitting ",
    "text": "3.3 Model Fitting"
  },
  {
    "objectID": "project.html#results",
    "href": "project.html#results",
    "title": "STOP COMPLAINING, IT SOLVES NOTHING.",
    "section": "3.4 Results ",
    "text": "3.4 Results"
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "My Assignments",
    "section": "",
    "text": "On this page, I showcase the assignment I conducted for the [term and year, e.g. Spring 2024] EMU660 Decision Making with Analytics course.\nPlease use left menu to navigate through my assignments.\n\n\n\n Back to top",
    "crumbs": [
      "My Assignments"
    ]
  },
  {
    "objectID": "about.html#employements",
    "href": "about.html#employements",
    "title": "About Me",
    "section": "Employements",
    "text": "Employements\n\nHacettepe University, Research Assistant, 2020 - ongoing."
  },
  {
    "objectID": "about.html#internships",
    "href": "about.html#internships",
    "title": "About Me",
    "section": "Internships",
    "text": "Internships\n\nLazzoni Furniture, Intern in Quality Department, August 2017\nAselsan, Intern in Production Planning and Control Department, July 2018\nTAI, Candidate Industrial Engineer, November 2018 - May 2019"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "My Blog",
    "section": "",
    "text": "This page is under construction.\n\n\n\n Back to top"
  },
  {
    "objectID": "docs/assignments/assignment-1.html",
    "href": "docs/assignments/assignment-1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "1 + 1\n\n[1] 2\n\n\nMy first assignment has two parts."
  },
  {
    "objectID": "assignments/assignment-1.html",
    "href": "assignments/assignment-1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "My first assignment has three parts.",
    "crumbs": [
      "Assignment 1"
    ]
  },
  {
    "objectID": "assignments/assignment-2.html",
    "href": "assignments/assignment-2.html",
    "title": "Assignment 2",
    "section": "",
    "text": "Assignment 2\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Assignment 2"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "{width=50%}"
  },
  {
    "objectID": "assignments/assignment-1.html#b",
    "href": "assignments/assignment-1.html#b",
    "title": "Assignment 1",
    "section": "(b)",
    "text": "(b)\n\nExploring Statistical Summaries of ‘mtcars’ dataset\n\n\nShow the code\ndata(mtcars)\ncustom_summary &lt;- function(x) {\n  list(mean = mean(x), median = median(x), stdev = sd(x), min = min(x), \n       max = max(x))\n}\nfor (i in names(mtcars)) {\n  cat(\"Column name:\", i,\"\\n\")\n  print(custom_summary(mtcars[[i]]))    #[i] returns a data frame; [[i]] returns the vector of that column\n}\n\n\nColumn name: mpg \n$mean\n[1] 20.09062\n\n$median\n[1] 19.2\n\n$stdev\n[1] 6.026948\n\n$min\n[1] 10.4\n\n$max\n[1] 33.9\n\nColumn name: cyl \n$mean\n[1] 6.1875\n\n$median\n[1] 6\n\n$stdev\n[1] 1.785922\n\n$min\n[1] 4\n\n$max\n[1] 8\n\nColumn name: disp \n$mean\n[1] 230.7219\n\n$median\n[1] 196.3\n\n$stdev\n[1] 123.9387\n\n$min\n[1] 71.1\n\n$max\n[1] 472\n\nColumn name: hp \n$mean\n[1] 146.6875\n\n$median\n[1] 123\n\n$stdev\n[1] 68.56287\n\n$min\n[1] 52\n\n$max\n[1] 335\n\nColumn name: drat \n$mean\n[1] 3.596563\n\n$median\n[1] 3.695\n\n$stdev\n[1] 0.5346787\n\n$min\n[1] 2.76\n\n$max\n[1] 4.93\n\nColumn name: wt \n$mean\n[1] 3.21725\n\n$median\n[1] 3.325\n\n$stdev\n[1] 0.9784574\n\n$min\n[1] 1.513\n\n$max\n[1] 5.424\n\nColumn name: qsec \n$mean\n[1] 17.84875\n\n$median\n[1] 17.71\n\n$stdev\n[1] 1.786943\n\n$min\n[1] 14.5\n\n$max\n[1] 22.9\n\nColumn name: vs \n$mean\n[1] 0.4375\n\n$median\n[1] 0\n\n$stdev\n[1] 0.5040161\n\n$min\n[1] 0\n\n$max\n[1] 1\n\nColumn name: am \n$mean\n[1] 0.40625\n\n$median\n[1] 0\n\n$stdev\n[1] 0.4989909\n\n$min\n[1] 0\n\n$max\n[1] 1\n\nColumn name: gear \n$mean\n[1] 3.6875\n\n$median\n[1] 4\n\n$stdev\n[1] 0.7378041\n\n$min\n[1] 3\n\n$max\n[1] 5\n\nColumn name: carb \n$mean\n[1] 2.8125\n\n$median\n[1] 2\n\n$stdev\n[1] 1.6152\n\n$min\n[1] 1\n\n$max\n[1] 8\n\n\nShow the code\nprint(apply(mtcars, 2, custom_summary))\n\n\n$mpg\n$mpg$mean\n[1] 20.09062\n\n$mpg$median\n[1] 19.2\n\n$mpg$stdev\n[1] 6.026948\n\n$mpg$min\n[1] 10.4\n\n$mpg$max\n[1] 33.9\n\n\n$cyl\n$cyl$mean\n[1] 6.1875\n\n$cyl$median\n[1] 6\n\n$cyl$stdev\n[1] 1.785922\n\n$cyl$min\n[1] 4\n\n$cyl$max\n[1] 8\n\n\n$disp\n$disp$mean\n[1] 230.7219\n\n$disp$median\n[1] 196.3\n\n$disp$stdev\n[1] 123.9387\n\n$disp$min\n[1] 71.1\n\n$disp$max\n[1] 472\n\n\n$hp\n$hp$mean\n[1] 146.6875\n\n$hp$median\n[1] 123\n\n$hp$stdev\n[1] 68.56287\n\n$hp$min\n[1] 52\n\n$hp$max\n[1] 335\n\n\n$drat\n$drat$mean\n[1] 3.596563\n\n$drat$median\n[1] 3.695\n\n$drat$stdev\n[1] 0.5346787\n\n$drat$min\n[1] 2.76\n\n$drat$max\n[1] 4.93\n\n\n$wt\n$wt$mean\n[1] 3.21725\n\n$wt$median\n[1] 3.325\n\n$wt$stdev\n[1] 0.9784574\n\n$wt$min\n[1] 1.513\n\n$wt$max\n[1] 5.424\n\n\n$qsec\n$qsec$mean\n[1] 17.84875\n\n$qsec$median\n[1] 17.71\n\n$qsec$stdev\n[1] 1.786943\n\n$qsec$min\n[1] 14.5\n\n$qsec$max\n[1] 22.9\n\n\n$vs\n$vs$mean\n[1] 0.4375\n\n$vs$median\n[1] 0\n\n$vs$stdev\n[1] 0.5040161\n\n$vs$min\n[1] 0\n\n$vs$max\n[1] 1\n\n\n$am\n$am$mean\n[1] 0.40625\n\n$am$median\n[1] 0\n\n$am$stdev\n[1] 0.4989909\n\n$am$min\n[1] 0\n\n$am$max\n[1] 1\n\n\n$gear\n$gear$mean\n[1] 3.6875\n\n$gear$median\n[1] 4\n\n$gear$stdev\n[1] 0.7378041\n\n$gear$min\n[1] 3\n\n$gear$max\n[1] 5\n\n\n$carb\n$carb$mean\n[1] 2.8125\n\n$carb$median\n[1] 2\n\n$carb$stdev\n[1] 1.6152\n\n$carb$min\n[1] 1\n\n$carb$max\n[1] 8\n\n\n\n\nShow the code\n# To be able to see the results in a dataframe:\nsummary_stats &lt;- sapply(mtcars, custom_summary)\nprint(summary_stats)\n\n\n       mpg      cyl      disp     hp       drat      wt        qsec    \nmean   20.09062 6.1875   230.7219 146.6875 3.596563  3.21725   17.84875\nmedian 19.2     6        196.3    123      3.695     3.325     17.71   \nstdev  6.026948 1.785922 123.9387 68.56287 0.5346787 0.9784574 1.786943\nmin    10.4     4        71.1     52       2.76      1.513     14.5    \nmax    33.9     8        472      335      4.93      5.424     22.9    \n       vs        am        gear      carb  \nmean   0.4375    0.40625   3.6875    2.8125\nmedian 0         0         4         2     \nstdev  0.5040161 0.4989909 0.7378041 1.6152\nmin    0         0         3         1     \nmax    1         1         5         8",
    "crumbs": [
      "Assignment 1"
    ]
  },
  {
    "objectID": "assignments/assignment-1.html#c",
    "href": "assignments/assignment-1.html#c",
    "title": "Assignment 1",
    "section": "(c)",
    "text": "(c)\n\nDisplaying and Manipulating the ‘na_example’ Dataset\n\n\nShow the code\nlibrary(dslabs)\ndata(na_example)\nna_example\n\n\n   [1]  2  1  3  2  1  3  1  4  3  2  2 NA  2  2  1  4 NA  1  1  2  1  2  2  1\n  [25]  2  5 NA  2  2  3  1  2  4  1  1  1  4  5  2  3  4  1  2  4  1  1  2  1\n  [49]  5 NA NA NA  1  1  5  1  3  1 NA  4  4  7  3  2 NA NA  1 NA  4  1  2  2\n  [73]  3  2  1  2  2  4  3  4  2  3  1  3  2  1  1  1  3  1 NA  3  1  2  2  1\n  [97]  2  2  1  1  4  1  1  2  3  3  2  2  3  3  3  4  1  1  1  2 NA  4  3  4\n [121]  3  1  2  1 NA NA NA NA  1  5  1  2  1  3  5  3  2  2 NA NA NA NA  3  5\n [145]  3  1  1  4  2  4  3  3 NA  2  3  2  6 NA  1  1  2  2  1  3  1  1  5 NA\n [169] NA  2  4 NA  2  5  1  4  3  3 NA  4  3  1  4  1  1  3  1  1 NA NA  3  5\n [193]  2  2  2  3  1  2  2  3  2  1 NA  2 NA  1 NA NA  2  1  1 NA  3 NA  1  2\n [217]  2  1  3  2  2  1  1  2  3  1  1  1  4  3  4  2  2  1  4  1 NA  5  1  4\n [241] NA  3 NA NA  1  1  5  2  3  3  2  4 NA  3  2  5 NA  2  3  4  6  2  2  2\n [265] NA  2 NA  2 NA  3  3  2  2  4  3  1  4  2 NA  2  4 NA  6  2  3  1 NA  2\n [289]  2 NA  1  1  3  2  3  3  1 NA  1  4  2  1  1  3  2  1  2  3  1 NA  2  3\n [313]  3  2  1  2  3  5  5  1  2  3  3  1 NA NA  1  2  4 NA  2  1  1  1  3  2\n [337]  1  1  3  4 NA  1  2  1  1  3  3 NA  1  1  3  5  3  2  3  4  1  4  3  1\n [361] NA  2  1  2  2  1  2  2  6  1  2  4  5 NA  3  4  2  1  1  4  2  1  1  1\n [385]  1  2  1  4  4  1  3 NA  3  3 NA  2 NA  1  2  1  1  4  2  1  4  4 NA  1\n [409]  2 NA  3  2  2  2  1  4  3  6  1  2  3  1  3  2  2  2  1  1  3  2  1  1\n [433]  1  3  2  2 NA  4  4  4  1  1 NA  4  3 NA  1  3  1  3  2  4  2  2  2  3\n [457]  2  1  4  3 NA  1  4  3  1  3  2 NA  3 NA  1  3  1  4  1  1  1  2  4  3\n [481]  1  2  2  2  3  2  3  1  1 NA  3  2  1  1  2 NA  2  2  2  3  3  1  1  2\n [505] NA  1  2  1  1  3  3  1  3  1  1  1  1  1  2  5  1  1  2  2  1  1 NA  1\n [529]  4  1  2  4  1  3  2 NA  1  1 NA  2  1  1  4  2  3  3  1  5  3  1  1  2\n [553] NA  1  1  3  1  3  2  4 NA  2  3  2  1  2  1  1  1  2  2  3  1  5  2 NA\n [577]  2 NA  3  2  2  2  1  5  3  2  3  1 NA  3  1  2  2  2  1  2  2  4 NA  6\n [601]  1  2 NA  1  1  2  2  3 NA  3  2  3  3  4  2 NA  2 NA  4 NA  1  1  2  2\n [625]  3  1  1  1  3 NA  2  5 NA  7  1 NA  4  3  3  1 NA  1  1  1  1  3  2  4\n [649]  2  2  3 NA NA  1  4  3  2  2  2  3  2  4  2  2  4 NA NA NA  6  3  3  1\n [673]  4  4  2  1 NA  1  6 NA  3  3  2  1  1  6 NA  1  5  1 NA  2  6  2 NA  4\n [697]  1  3  1  2 NA  1  1  3  1  2  4  2  1  3  2  4  3  2  2  1  1  5  6  4\n [721]  2  2  2  2  4 NA  1  2  2  2  2  4  5 NA NA NA  4  3  3  3  2  4  2  4\n [745] NA NA NA NA  2  1 NA  2  4  3  2 NA  2  3  1  3  4 NA  1  2  1  2 NA  3\n [769]  1  2  1  2  1  2  1  2  2  2  2  1  1  3  3  1  3  4  3 NA NA  4  2  3\n [793]  2  1  3  2  4  2  2  3  1  2  4  3  3  4 NA  1  4  2  1  1  1  3  1  5\n [817]  2  2  4  2 NA  1  3  1  2 NA  1  2  1  2  1 NA  1  3  2  3  2 NA  2  1\n [841]  4  2 NA NA NA  2  4  2 NA NA  3  1 NA  5  5  2  2  2 NA  2  1  3  1  3\n [865]  2  4  2  4 NA  4  1  2  3  2  3  3  2  3  2  2  2  1  3  2  4  2 NA  3\n [889]  3  2  2 NA NA  3  2  1  2  4  1  1  1  1  4  3  2 NA  3  2 NA  1 NA  3\n [913]  2  1  1  1  2 NA  2  2  3  3  2 NA NA  4  5  2  2  2  1  2  3  1  3  3\n [937]  4  3 NA  1  1  1 NA  4  3  5  1  1  2 NA  2  2  2  2  5  2  2  3  1  2\n [961]  3 NA  1  2 NA NA  2 NA  3  1  1  2  5  3  5  1  1  4 NA  2  1  3  1  1\n [985]  2  4  3  3  3 NA  1  1  2  2  1  1  2  2 NA  2\n\n\nShow the code\nstr(na_example)\n\n\n int [1:1000] 2 1 3 2 1 3 1 4 3 2 ...\n\n\n\n\nShow the code\ndata(na_example)\n\nnumber_NA &lt;- sum(is.na(na_example))\ncat(\"Number of NAs in the dataset: \", number_NA)\n\n\nNumber of NAs in the dataset:  145\n\n\n\n\nShow the code\ndata(na_example)\n\nnew_NA_example &lt;- replace(na_example, is.na(na_example), 660)\ncat(\"The new version of the dataset: \", new_NA_example)\n\n\nThe new version of the dataset:  2 1 3 2 1 3 1 4 3 2 2 660 2 2 1 4 660 1 1 2 1 2 2 1 2 5 660 2 2 3 1 2 4 1 1 1 4 5 2 3 4 1 2 4 1 1 2 1 5 660 660 660 1 1 5 1 3 1 660 4 4 7 3 2 660 660 1 660 4 1 2 2 3 2 1 2 2 4 3 4 2 3 1 3 2 1 1 1 3 1 660 3 1 2 2 1 2 2 1 1 4 1 1 2 3 3 2 2 3 3 3 4 1 1 1 2 660 4 3 4 3 1 2 1 660 660 660 660 1 5 1 2 1 3 5 3 2 2 660 660 660 660 3 5 3 1 1 4 2 4 3 3 660 2 3 2 6 660 1 1 2 2 1 3 1 1 5 660 660 2 4 660 2 5 1 4 3 3 660 4 3 1 4 1 1 3 1 1 660 660 3 5 2 2 2 3 1 2 2 3 2 1 660 2 660 1 660 660 2 1 1 660 3 660 1 2 2 1 3 2 2 1 1 2 3 1 1 1 4 3 4 2 2 1 4 1 660 5 1 4 660 3 660 660 1 1 5 2 3 3 2 4 660 3 2 5 660 2 3 4 6 2 2 2 660 2 660 2 660 3 3 2 2 4 3 1 4 2 660 2 4 660 6 2 3 1 660 2 2 660 1 1 3 2 3 3 1 660 1 4 2 1 1 3 2 1 2 3 1 660 2 3 3 2 1 2 3 5 5 1 2 3 3 1 660 660 1 2 4 660 2 1 1 1 3 2 1 1 3 4 660 1 2 1 1 3 3 660 1 1 3 5 3 2 3 4 1 4 3 1 660 2 1 2 2 1 2 2 6 1 2 4 5 660 3 4 2 1 1 4 2 1 1 1 1 2 1 4 4 1 3 660 3 3 660 2 660 1 2 1 1 4 2 1 4 4 660 1 2 660 3 2 2 2 1 4 3 6 1 2 3 1 3 2 2 2 1 1 3 2 1 1 1 3 2 2 660 4 4 4 1 1 660 4 3 660 1 3 1 3 2 4 2 2 2 3 2 1 4 3 660 1 4 3 1 3 2 660 3 660 1 3 1 4 1 1 1 2 4 3 1 2 2 2 3 2 3 1 1 660 3 2 1 1 2 660 2 2 2 3 3 1 1 2 660 1 2 1 1 3 3 1 3 1 1 1 1 1 2 5 1 1 2 2 1 1 660 1 4 1 2 4 1 3 2 660 1 1 660 2 1 1 4 2 3 3 1 5 3 1 1 2 660 1 1 3 1 3 2 4 660 2 3 2 1 2 1 1 1 2 2 3 1 5 2 660 2 660 3 2 2 2 1 5 3 2 3 1 660 3 1 2 2 2 1 2 2 4 660 6 1 2 660 1 1 2 2 3 660 3 2 3 3 4 2 660 2 660 4 660 1 1 2 2 3 1 1 1 3 660 2 5 660 7 1 660 4 3 3 1 660 1 1 1 1 3 2 4 2 2 3 660 660 1 4 3 2 2 2 3 2 4 2 2 4 660 660 660 6 3 3 1 4 4 2 1 660 1 6 660 3 3 2 1 1 6 660 1 5 1 660 2 6 2 660 4 1 3 1 2 660 1 1 3 1 2 4 2 1 3 2 4 3 2 2 1 1 5 6 4 2 2 2 2 4 660 1 2 2 2 2 4 5 660 660 660 4 3 3 3 2 4 2 4 660 660 660 660 2 1 660 2 4 3 2 660 2 3 1 3 4 660 1 2 1 2 660 3 1 2 1 2 1 2 1 2 2 2 2 1 1 3 3 1 3 4 3 660 660 4 2 3 2 1 3 2 4 2 2 3 1 2 4 3 3 4 660 1 4 2 1 1 1 3 1 5 2 2 4 2 660 1 3 1 2 660 1 2 1 2 1 660 1 3 2 3 2 660 2 1 4 2 660 660 660 2 4 2 660 660 3 1 660 5 5 2 2 2 660 2 1 3 1 3 2 4 2 4 660 4 1 2 3 2 3 3 2 3 2 2 2 1 3 2 4 2 660 3 3 2 2 660 660 3 2 1 2 4 1 1 1 1 4 3 2 660 3 2 660 1 660 3 2 1 1 1 2 660 2 2 3 3 2 660 660 4 5 2 2 2 1 2 3 1 3 3 4 3 660 1 1 1 660 4 3 5 1 1 2 660 2 2 2 2 5 2 2 3 1 2 3 660 1 2 660 660 2 660 3 1 1 2 5 3 5 1 1 4 660 2 1 3 1 1 2 4 3 3 3 660 1 1 2 2 1 1 2 2 660 2\n\n\n\n\nShow the code\nnew_NA_example &lt;- replace(na_example, is.na(na_example), 660)\n\nnumber_NA &lt;- sum(is.na(new_NA_example))\ncat(\"The number of NAs in the new version: \", number_NA)\n\n\nThe number of NAs in the new version:  0\n\n\n\n\nShow the code\nnew_NA_example &lt;- replace(na_example, is.na(na_example), 660)\n\nnumber_660 &lt;- sum(new_NA_example == 660)\ncat(\"The number of 660s in the new version: \", number_660)\n\n\nThe number of 660s in the new version:  145",
    "crumbs": [
      "Assignment 1"
    ]
  },
  {
    "objectID": "assignments/assignment-1.html#a",
    "href": "assignments/assignment-1.html#a",
    "title": "Assignment 1",
    "section": "(a)",
    "text": "(a)\n\nA brief summary of Mr. Vardar’s speech\nIn my opinion, Mr. Cem Vardar’s speech can be categorized into three main segments.\nFirstly, Mr Cem Vardar emphasises that Industrial Engineers have the necessary skills to use data science tools effectively and underlines the synergy between Industrial Engineering and data science applications. According to him, data analytics is a tool for problem-solving for Industrial Engineers.\nSecondly, Mr. Vardar highlights that the most effective designs in complex systems require simple solutions, even if complex solutions are necessary, they should start with simple beginnings.\nFinally, he discusses the Pareto Principle (80-20 principle), specifically mentioning that learning just 20% of skills related to data analytics, such as programming languages, data mining methods, or the use of cloud environments, will actually meet 80% of an Industrial Engineer’s needs.",
    "crumbs": [
      "Assignment 1"
    ]
  },
  {
    "objectID": "project.html#time-series-analysis",
    "href": "project.html#time-series-analysis",
    "title": "STOP COMPLAINING, IT SOLVES NOTHING.",
    "section": "3.3 Time Series Analysis ",
    "text": "3.3 Time Series Analysis \nThe MSW time series data for Turkiye lacks values for some intermediate years (e.g. 2017, 2019, 2021, etc.), which implies that time series analysis must be conducted under incomplete information. In this respect, Grey Prediction (GP) is a powerful forecasting approach to effectively manage the forecast analysis for MSW [6]. This method is particularly advantageous when data availability is limited, as it requires only a few data points to construct reliable models [6]. The core idea of GP involves transforming a complex data series into a more predictable one using a set of operations, such as the Accumulated Generating Operator (AGO), the Inverse Accumulating Operator (IAGO) and Grey Model (GM) [6].\nThe ExoplanetX greyforecasting R package is used to apply grey prediction models to the MSW time series [7]. All GP models included in the package are applied to the data in the background, and the best model in terms of performance is provided along with its accuracy and 5-year forecasting results.\nThe GP models in the package are as follows (*):\n\ngm: Grey Model (1,1), It’s a first-order differential equation model with one variable.\ngm_1: GM(1,1)_1, This variant of the GM(1,1) model includes slight modifications or improvements over the standard GM(1,1) model to enhance prediction accuracy or adapt to specific types of data.\ngm_2: GM(1,1)_2, Another variant of the GM(1,1) model, with different modifications from GM(1,1)_1, aiming to improve forecasting performance under certain conditions.\ndgm: Discrete Grey Model, This model is a discrete version of the grey prediction model, which operates on discrete data points rather than continuous data, making it suitable for time series data that are naturally discrete.\nverhulst: Verhulst Model, The Verhulst model is a nonlinear grey prediction model that is particularly useful for data that follow an S-shaped growth curve, such as population growth or diffusion processes.\npgm: Grey Power Model, The Grey Power Model is another variant of grey models that incorporates power functions into the grey modeling process to handle data with certain types of nonlinearity.\n\nFirst, the necessary packages are installed, and libraries are called.\n\n\nShow the code\n# Install and load necessary packages\n#install.packages(\"remotes\")\n#remotes::install_github(\"exoplanetX/greyforecasting\")\n# install.packages(\"Metrics\")\n# install.packages(\"readxl\")\n# install.packages(\"ggplot2\")\n\nlibrary(greyforecasting)\n\n\n\nAttaching package: 'greyforecasting'\n\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\n\nShow the code\nlibrary(Metrics)\n\n\nWarning: package 'Metrics' was built under R version 4.3.3\n\n\n\nAttaching package: 'Metrics'\n\n\nThe following objects are masked from 'package:greyforecasting':\n\n    ape, mape\n\n\nShow the code\nlibrary(readxl)\nlibrary(tidyverse)\n\n\nWhen all models are applied to the data in the background, the method that gives the best result is the DGM (Discrete Grey Model) method.\n\n\nShow the code\nfile_path &lt;- \"time_series_municipal_waste.xlsx\"\nwaste_data &lt;- read_excel(file_path, sheet = \"Sheet 1\")\nwaste_collected &lt;- as.numeric(waste_data[3, -1]) \n\n# AutoML \nfit_and_forecast &lt;- function(model_func, data, forecast_steps = 5) {\n  model &lt;- model_func(data)\n  fitted_values &lt;- model$fitted\n  n &lt;- length(data)\n  forecast_values &lt;- numeric(forecast_steps)\n  \n  for (i in 1:forecast_steps) {\n    extended_data &lt;- c(data, forecast_values[1:(i-1)])\n    forecast_model &lt;- model_func(extended_data)\n    forecast_values[i] &lt;- tail(forecast_model$fitted, 1)\n  }\n  \n  list(model = model, fitted = fitted_values, forecast = forecast_values)\n}\n\n# Models to evaluate\nmodels &lt;- list(\n  gm = gm,\n  gm_1 = gm_1,\n  gm_2 = gm_2,\n  dgm = dgm,\n  verhulst = verhulst,\n  pgm = pgm\n)\n\n# Applying models and calculate accuracy\nresults &lt;- lapply(models, function(model_func) {\n  result &lt;- fit_and_forecast(model_func, waste_collected, forecast_steps = 5)\n  accuracy &lt;- rmse(waste_collected[(length(waste_collected)-4):length(waste_collected)], result$forecast)\n  list(model = result$model, fitted = result$fitted, forecast = result$forecast, accuracy = accuracy)\n})\n\nbest_model_index &lt;- which.min(sapply(results, function(x) x$accuracy))\nbest_model_name &lt;- names(results)[best_model_index]\nbest_model &lt;- results[[best_model_index]]\n\ncat(\"The best model is:\", best_model_name, \"\\n\")\n\n\nThe best model is: dgm \n\n\nThen, the accuracy metric value and forecast values for the next 5 years are provided for the DGM model.\n\n\nShow the code\ncat(\"Best model RMSE:\", best_model$accuracy, \"\\n\")\n\n\nBest model RMSE: 1365.859 \n\n\nShow the code\nprint(best_model$forecast)\n\n\n[1] 30271.09 30922.96 30883.69 31518.20 31456.93\n\n\nFinally, the original data, fitted values, and forecast points are shown in the graph below.\n\n\nShow the code\nyears &lt;- as.numeric(substr(names(waste_data)[-1], 1, 4))  \nforecast_years &lt;- (max(years) + 1):(max(years) + length(best_model$forecast))\nplot_data &lt;- data.frame(\n  Year = c(years, forecast_years),\n  Value = c(waste_collected, best_model$forecast),\n  Type = c(rep(\"Actual\", length(waste_collected)), rep(\"Forecast\", length(best_model$forecast)))\n)\n\nfitted_data &lt;- data.frame(\n  Year = years,\n  Value = best_model$fitted,\n  Type = \"Fitted\"\n)\nplot_data &lt;- rbind(plot_data, fitted_data)\n\nggplot(plot_data, aes(x = Year, y = Value, color = Type)) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Grey Model Fitting and Forecast\",\n       x = \"Year\",\n       y = \"Amount of Municipal Waste Collected (Thousand tonnes/year)\") +\n  scale_color_manual(values = c(\"Actual\" = \"green\", \"Fitted\" = \"red\", \"Forecast\" = \"blue\")) +\n  theme_classic()\n\n\n\n\n\n\n\n\n\nIn the above graph, an increasing trend over the years is observed due to the consideration of total waste amounts. However, Turkiye’s population growth is also a factor that must be taken into account. When analyzing the per capita waste production instead of the total amounts, the graph below is obtained.\n\n\nShow the code\nwaste_collected &lt;- as.numeric(time_series_municipal_waste[4, -1]) \n# AutoML \nfit_and_forecast &lt;- function(model_func, data, forecast_steps = 5) {\n  model &lt;- model_func(data)\n  fitted_values &lt;- model$fitted\n  n &lt;- length(data)\n  forecast_values &lt;- numeric(forecast_steps)\n  \n  for (i in 1:forecast_steps) {\n    extended_data &lt;- c(data, forecast_values[1:(i-1)])\n    forecast_model &lt;- model_func(extended_data)\n    forecast_values[i] &lt;- tail(forecast_model$fitted, 1)\n  }\n  \n  list(model = model, fitted = fitted_values, forecast = forecast_values)\n}\n\n# Models to evaluate\nmodels &lt;- list(\n  gm = gm,\n  gm_1 = gm_1,\n  gm_2 = gm_2,\n  dgm = dgm,\n  verhulst = verhulst,\n  pgm = pgm\n)\n\n# Applying models and calculate accuracy\nresults &lt;- lapply(models, function(model_func) {\n  result &lt;- fit_and_forecast(model_func, waste_collected, forecast_steps = 5)\n  accuracy &lt;- rmse(waste_collected[(length(waste_collected)-4):length(waste_collected)], result$forecast)\n  list(model = result$model, fitted = result$fitted, forecast = result$forecast, accuracy = accuracy)\n})\n\nbest_model_index &lt;- which.min(sapply(results, function(x) x$accuracy))\nbest_model_name &lt;- names(results)[best_model_index]\nbest_model &lt;- results[[best_model_index]]\n\ncat(\"The best model is:\", best_model_name, \"\\n\")\n\n\nThe best model is: dgm \n\n\nThen, the accuracy metric value and forecast values for the next 5 years are provided for the DGM model.\n\n\nShow the code\ncat(\"Best model RMSE:\", best_model$accuracy, \"\\n\")\n\n\nBest model RMSE: 0.1330711 \n\n\nShow the code\nprint(best_model$forecast)\n\n\n[1] 0.9997255 1.0134248 0.9806750 0.9938774 0.9619003\n\n\nFinally, the original data, fitted values, and forecast points are shown in the graph below.\n\n\nShow the code\nyears &lt;- as.numeric(substr(names(time_series_municipal_waste)[-1], 1, 4))  \nforecast_years &lt;- (max(years) + 1):(max(years) + length(best_model$forecast))\nplot_data &lt;- data.frame(\n  Year = c(years, forecast_years),\n  Value = c(waste_collected, best_model$forecast),\n  Type = c(rep(\"Actual\", length(waste_collected)), rep(\"Forecast\", length(best_model$forecast)))\n)\n\nfitted_data &lt;- data.frame(\n  Year = years,\n  Value = best_model$fitted,\n  Type = \"Fitted\"\n)\nplot_data &lt;- rbind(plot_data, fitted_data)\n\nggplot(plot_data, aes(x = Year, y = Value, color = Type)) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Grey Model Fitting and Forecast\",\n       x = \"Year\",\n       y = \"Amount of Municipal Waste Collected (Thousand tonnes/year)\") +\n  scale_color_manual(values = c(\"Actual\" = \"green\", \"Fitted\" = \"red\", \"Forecast\" = \"blue\")) +\n  theme_classic()\n\n\n\n\n\n\n\n\n\nIn the waste per capita case, the best fit model according to RMSE is again the DGM. Unlike before, a decreasing trend over the years is noticeable in above figure, indicating that the increasing population must be considered in the analysis.\nThe following are the results obtained when performing the same grey forecasting analysis for Ankara.\n\n\nShow the code\nlibrary(greyforecasting)\nlibrary(Metrics)\nlibrary(readxl)\nlibrary(tidyverse)\nankara &lt;- ts_province %&gt;% filter(Province == \"Ankara\") %&gt;% arrange(Year)\nankara_waste &lt;- ankara$`Waste amount (1000 ton)`\n\n# AutoML greyforecasting function\nfit_and_forecast &lt;- function(model_func, data, forecast_steps = 5) {\n  model &lt;- model_func(data)\n  fitted_values &lt;- model$fitted\n  forecast_values &lt;- numeric(forecast_steps)\n  \n  for (i in 1:forecast_steps) {\n    extended_data &lt;- c(data, forecast_values[1:(i-1)])\n    forecast_model &lt;- model_func(extended_data)\n    forecast_values[i] &lt;- tail(forecast_model$fitted, 1)\n  }\n  \n  list(model = model, fitted = fitted_values, forecast = forecast_values)\n}\n\nmodels &lt;- list(\n  gm = gm,\n  gm_1 = gm_1,\n  gm_2 = gm_2,\n  dgm = dgm,\n  verhulst = verhulst,\n  pgm = pgm\n)\n\nresults &lt;- lapply(models, function(model_func) {\n  result &lt;- fit_and_forecast(model_func, ankara_waste, forecast_steps = 5)\n  accuracy &lt;- rmse(tail(ankara_waste, min(5, length(ankara_waste))), result$forecast)\n  list(model = result$model, fitted = result$fitted, forecast = result$forecast, accuracy = accuracy)\n})\n\nbest_model_index &lt;- which.min(sapply(results, function(x) x$accuracy))\nbest_model_name &lt;- names(results)[best_model_index]\nbest_model &lt;- results[[best_model_index]]\n\ncat(\"The best model is:\", best_model_name, \"\\n\")\n\n\nThe best model is: dgm \n\n\nShow the code\ncat(\"Best model RMSE:\", best_model$accuracy, \"\\n\")\n\n\nBest model RMSE: 290.0232 \n\n\nShow the code\nprint(best_model$forecast)\n\n\n[1] 1884.965 1933.066 1861.282 1907.419 1836.855\n\n\nThe graph:\n\n\nShow the code\n# Prepare data for plotting\nyears &lt;- ankara$Year\nforecast_years &lt;- (max(years) + 1):(max(years) + length(best_model$forecast))\n\nplot_data &lt;- data.frame(\n  Year = c(years, forecast_years),\n  Value = c(ankara_waste, best_model$forecast),\n  Type = c(rep(\"Actual\", length(ankara_waste)), rep(\"Forecast\", length(best_model$forecast)))\n)\nfitted_data &lt;- data.frame(\n  Year = years,\n  Value = best_model$fitted,\n  Type = \"Fitted\"\n)\n\nplot_data &lt;- rbind(plot_data, fitted_data)\n\nggplot(plot_data, aes(x = Year, y = Value, color = Type)) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Grey Model Fitting and Forecast for Ankara\",\n       x = \"Year\",\n       y = \"Amount of Municipal Waste Collected (Thousand tonnes/year)\") +\n  scale_color_manual(values = c(\"Actual\" = \"green\", \"Fitted\" = \"red\", \"Forecast\" = \"blue\")) +\n  theme_classic()\n\n\n\n\n\n\n\n\n\nBased on the time series analysis, it was concluded that the DGM model is the most appropriate time series model for the data containing total MSW quantities. The fact that data is not available at irregular intervals of time already tells us that the model suitable for the data should be discrete. The DGM model forecasted the next five years with the following values: 30,271.09, 30,922.96, 30,883.69, 31,518.20, and 31,456.93 tonnes. As shown in plots above, the model closely fits the historical data and strengthens the reliability of these forecast values. It is also the best method according to the RMSE performance metric.\nThe observed increasing trend is consistent with Turkiye’s historical waste generation patterns and highlights the increasing waste management challenge posed by urbanization and population growth. In addition, considering Turkiye’s population growth, waste generation per capita was also analysed in the study. The per capita waste forecasts have shown a decreasing trend over the years.\nIn addition, the MSW time series analysis of our city (Ankara) is also included. The DGM model was again dominant, which is logical since it is again an interval time data."
  },
  {
    "objectID": "project.html#regression-analysis",
    "href": "project.html#regression-analysis",
    "title": "STOP COMPLAINING, IT SOLVES NOTHING.",
    "section": "3.2 Regression Analysis ",
    "text": "3.2 Regression Analysis \nAdditional Data\nThe data sets needed to identify variables contributing to total waste generation and to conduct regression analysis have been preprocessed below.\nData on the agricultural area cultivated in the provinces of Turkiye can be accessed below.\n\n\nShow the code\nlibrary(openxlsx)\nlibrary(tidyverse)\n# agriculture area\nagriculture_area &lt;- read.xlsx(\"project/data/agriculture_area.xlsx\", colNames = TRUE)\nagriculture_area &lt;- select(agriculture_area, -\"YIL\")  \nagriculture_area &lt;- select(agriculture_area, -\"BÖLGE.KODU\")  \nagriculture_area &lt;- rename(agriculture_area, \"Provinces\" = \"BÖLGE.ADI\")\nagriculture_area &lt;- rename(agriculture_area, \"Agriculture area\" =`Toplam.işlenen.tarım.alanı.(hektar)`)\nagriculture_area &lt;- agriculture_area [-c(83:87), ]\nagriculture_area &lt;- agriculture_area [-c(1), ]\nstr(agriculture_area)\n\n\n'data.frame':   81 obs. of  2 variables:\n $ Provinces       : chr  \"İstanbul\" \"Tekirdağ\" \"Edirne\" \"Kırklareli\" ...\n $ Agriculture area: num  74041 403706 335499 245224 288589 ...\n\n\nThe data on educational status of Turkiye’s provinces, categorized by various levels, is provided in education data set.\n\n\nShow the code\n# education\neducation &lt;- read.xlsx(\"project/data/education.xlsx\", colNames = TRUE)\neducation &lt;- select(education, -\"YIL\")  \neducation &lt;- select(education, -\"BÖLGE.KODU\")\neducation  &lt;- rename(education , \"Provinces\" = \"BÖLGE.ADI\")\neducation  &lt;- rename(education , \"Total number of faculty members\" = `Yükseköğretim.kurumlarında.kendi.biriminde.görevli.öğretim.elemanı.sayısı.:.Toplam.öğretim.elemanı./.Toplam`)\neducation  &lt;- rename(education , \"Total number of illiterate people\" = `Eğitim.durumuna.göre.nüfus.(15.yaş.ve.üzeri).:.Okuma.yazma.bilmeyen./.Toplam`)\neducation  &lt;- rename(education , \"Number of associate or bachelor's degree graduates\" = `Yükseköğretim.kurumlarında.önlisans.ve.lisans.düzeyinde.öğrenci.sayıları.:.Mezun./.Toplam`)\neducation  &lt;- rename(education , \"Number of master's degree graduates\" = `Eğitim.durumuna.göre.nüfus.(15.yaş.ve.üzeri).:.Yüksek.lisans.mezunu./.Toplam`)\neducation &lt;- education [-c(1), ]\nstr(education)\n\n\n'data.frame':   81 obs. of  5 variables:\n $ Provinces                                         : chr  \"İstanbul\" \"Tekirdağ\" \"Edirne\" \"Kırklareli\" ...\n $ Total number of faculty members                   : num  40140 1221 1871 883 1837 ...\n $ Total number of illiterate people                 : num  206140 11573 7011 4462 17368 ...\n $ Number of associate or bachelor's degree graduates: num  167695 3728 6517 3682 7465 ...\n $ Number of master's degree graduates               : num  389440 14458 6914 5137 18318 ...\n\n\nThe first six rows of the electricity consumption data for the provinces of Turkiye are as follows.\n\n\nShow the code\n# electricity consumption\nelectricity_consumption &lt;- read.xlsx(\"project/data/electricity_consumption.xlsx\", colNames = TRUE)\nelectricity_consumption &lt;- select(electricity_consumption, -\"YIL\")  \nelectricity_consumption &lt;- select(electricity_consumption, -\"BÖLGE.KODU\")  \nelectricity_consumption  &lt;- rename(electricity_consumption , \"Provinces\" = \"BÖLGE.ADI\")\nelectricity_consumption  &lt;- rename(electricity_consumption , \"Total electricity consumption (MWh)\" = `Toplam.tüketim.(MWh)`)\nelectricity_consumption  &lt;- rename(electricity_consumption , \"Electricity consumption per capita (KWh)\" = `Kişi.başına.toplam.elektrik.tüketimi.(KWh)`)\nelectricity_consumption &lt;- electricity_consumption [-c(83, 84, 85), ]\nelectricity_consumption &lt;- electricity_consumption[-c(1), ]\nstr(electricity_consumption)\n\n\n'data.frame':   81 obs. of  3 variables:\n $ Provinces                               : chr  \"İstanbul\" \"Tekirdağ\" \"Edirne\" \"Kırklareli\" ...\n $ Total electricity consumption (MWh)     : num  41520357 8502879 1299120 2715585 4276586 ...\n $ Electricity consumption per capita (KWh): num  2621 7637 3152 7412 3420 ...\n\n\nThe GDP data for the provinces of Turkiye has been obtained.\n\n\nShow the code\n# GDP\nGDP &lt;- read.xlsx(\"project/data/GDP.xlsx\", colNames = TRUE)\nGDP &lt;- select(GDP, -\"YIL\")  \nGDP &lt;- select(GDP, -\"BÖLGE.KODU\")  \nGDP  &lt;- rename(GDP , \"Provinces\" = \"BÖLGE.ADI\")\nGDP  &lt;- rename(GDP , \"GDP per capita (TL)\" = `Kişi.başına.GSYH.(TL)`)\nGDP  &lt;- rename(GDP , \"GDP per capita ($)\" = `Kişi.başına.GSYH.($)`)\nGDP &lt;- GDP [-c(83, 84), ]\nstr(GDP)\n\n\n'data.frame':   82 obs. of  3 variables:\n $ Provinces          : chr  \"Türkiye\" \"İstanbul\" \"Tekirdağ\" \"Edirne\" ...\n $ GDP per capita (TL): num  176651 287524 253501 147752 201355 ...\n $ GDP per capita ($) : num  10659 17349 15296 8915 12150 ...\n\n\nIf the response variable is extracted from the municipal data set, the desired variable of waste amount by province can be obtained for the analysis.\n\n\nShow the code\n# Amount of waste\nresponse_variable &lt;- select(municipal_waste, \"Provinces\")  \nresponse_variable &lt;- cbind(response_variable, \"Amount of waste collected (Tonnes)\" = municipal_waste$`Amount of waste collected (Tonnes) \n`)\nstr(response_variable)\n\n\n'data.frame':   81 obs. of  2 variables:\n $ Provinces                         : chr  \"Adana\" \"Adıyaman\" \"Afyonkarahisar\" \"Ağrı\" ...\n $ Amount of waste collected (Tonnes): num  665695 179724 198273 181116 111099 ...\n\n\nThe regression analysis below has been conducted using the total amount of waste collected at the provincial level as the response variable. The independent variables include GDP per capita, agricultural area, total number of faculty members, total number of illiterate people, number of associate or bachelor’s degree graduates, number of master’s degree graduates, and electricity consumption. The final table prepared for regression analysis can be found below.\n\n\nShow the code\nregression_data &lt;- data.frame()\nregression_data &lt;- full_join(response_variable, agriculture_area, by = \"Provinces\")\nregression_data &lt;- full_join(regression_data, education,  by = \"Provinces\")\nregression_data &lt;- full_join(regression_data, electricity_consumption,  by = \"Provinces\")\nregression_data &lt;- full_join(regression_data, GDP,  by = \"Provinces\")\nstr(regression_data)\n\n\n'data.frame':   82 obs. of  11 variables:\n $ Provinces                                         : chr  \"Adana\" \"Adıyaman\" \"Afyonkarahisar\" \"Ağrı\" ...\n $ Amount of waste collected (Tonnes)                : num  665695 179724 198273 181116 111099 ...\n $ Agriculture area                                  : num  400819 166921 536127 351566 235758 ...\n $ Total number of faculty members                   : num  2593 925 1647 561 725 ...\n $ Total number of illiterate people                 : num  54962 26688 12334 25954 6815 ...\n $ Number of associate or bachelor's degree graduates: num  7987 2453 6787 2065 2870 ...\n $ Number of master's degree graduates               : num  33810 7359 9331 3925 4385 ...\n $ Total electricity consumption (MWh)               : num  7991581 1327087 2131943 495005 706136 ...\n $ Electricity consumption per capita (KWh)          : num  3531 2099 2865 944 2106 ...\n $ GDP per capita (TL)                               : num  135798 79223 114168 55296 112044 ...\n $ GDP per capita ($)                                : num  8194 4780 6889 3337 6761 ...\n\n\nRegression Analysis\nIn regression analysis using the forward selection method, the model begins with the variable that exhibits the highest correlation with the response variable, ‘Amount of waste collected’. Subsequently, additional variables are incorporated into the model based on their partial correlations.\n\n\nShow the code\nlibrary(ppcor)\n\n\nWarning: package 'ppcor' was built under R version 4.3.3\n\n\nZorunlu paket yükleniyor: MASS\n\n\n\nAttaching package: 'MASS'\n\n\nThe following object is masked from 'package:dplyr':\n\n    select\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(readxl)\n\n\nWarning: package 'readxl' was built under R version 4.3.3\n\n\nShow the code\nregression_data &lt;- read_excel(\"regression_data.xlsx\")\nnumeric_cols &lt;- c(\"Amount of waste collected (Tonnes)\", \"Agriculture area\", \n                  \"Total number of faculty members\", \"Total number of illiterate people\",\n                  \"Number of associate or bachelor's degree graduates\", \"Total electricity consumption (MWh)\",\n                  \"GDP per capita (TL)\", \"Number of master's degree graduates\")\nregression_data[numeric_cols] &lt;- sapply(regression_data[numeric_cols], as.numeric)\n\nif(any(is.na(regression_data[numeric_cols]))) {\n  regression_data &lt;- na.omit(regression_data)\n}\n\nconstant_cols &lt;- sapply(regression_data[numeric_cols], function(x) length(unique(x)) &lt;= 1)\nif(any(constant_cols)) {\n  regression_data &lt;- regression_data[, !constant_cols]\n}\n\npredictor_columns &lt;- names(regression_data) != \"Amount of waste collected (Tonnes)\"\ncorrelation &lt;- cor(regression_data[predictor_columns], regression_data$`Amount of waste collected (Tonnes)`)\nprint(correlation)\n\n\n                                                        [,1]\nAgriculture area                                   0.1237475\nTotal number of faculty members                    0.9500715\nTotal number of illiterate people                  0.8469772\nNumber of associate or bachelor's degree graduates 0.7395918\nNumber of master's degree graduates                0.9708360\nTotal electricity consumption (MWh)                0.9327005\nGDP per capita (TL)                                0.5047206\n\n\nThe plot between the response variable and the independent variable with highest correlation (Number of master’s degree graduates):\n\n\nShow the code\nlibrary(ggthemes)\nggplot(regression_data, aes(`Amount of waste collected (Tonnes)`/10^4,`Number of master's degree graduates`/10^4)) + geom_point(color = \"brown\") + scale_x_log10() +\nscale_y_log10() + theme_classic() + labs(x = \"The amount of waste collected (kg)\", y = \"The number of master's degree graduates (log scale)\", title = \"The lineer relationship\") + coord_flip()\n\n\n\n\n\n\n\n\n\nPartial correlations: between variables while controlling the variable with the highest correlation:\n\n\nShow the code\nlibrary(ppcor)\npartial_cor1 &lt;- pcor.test(regression_data$`Amount of waste collected (Tonnes)`, regression_data$`Agriculture area`, regression_data$`Number of master's degree graduates`)\npartial_cor2 &lt;- pcor.test(regression_data$`Amount of waste collected (Tonnes)`, regression_data$`Total number of faculty members`, regression_data$`Number of master's degree graduates`)\npartial_cor3 &lt;-pcor.test(regression_data$`Amount of waste collected (Tonnes)`, regression_data$`Total number of illiterate people`, regression_data$`Number of master's degree graduates`)\npartial_cor4 &lt;-pcor.test(regression_data$`Amount of waste collected (Tonnes)`, regression_data$`Number of associate or bachelor's degree graduates`, regression_data$`Number of master's degree graduates`)\npartial_cor5 &lt;-pcor.test(regression_data$`Amount of waste collected (Tonnes)`, regression_data$`Total electricity consumption (MWh)`, regression_data$`Number of master's degree graduates`)\npartial_cor6 &lt;-pcor.test(regression_data$`Amount of waste collected (Tonnes)`, regression_data$`GDP per capita (TL)`, regression_data$`Number of master's degree graduates`)\nprint(partial_cor5)\n\n\n   estimate      p.value statistic  n gp  Method\n1 0.5732279 2.742934e-08  6.178469 81  1 pearson\n\n\nWhen examining the partial correlation values for other columns, taking into account those with significant p-values, the variable with the highest partial correlation is ‘Total electricity consumption’. Therefore, it should be the second variable added to the regression model.\nIn the next step, partial correlations are examined while controlling for the two variables with the highest correlations this time. Those that pass the significant test from the previous step are included in this calculations.\n\n\nShow the code\npartial_corr1 &lt;- pcor.test(regression_data$`Amount of waste collected (Tonnes)`, regression_data$`Total number of faculty members`, regression_data[,c(6,7)])\npartial_corr2 &lt;-pcor.test(regression_data$`Amount of waste collected (Tonnes)`, regression_data$`Total number of illiterate people`, regression_data[,c(6,7)])\nprint(partial_corr2)\n\n\n  estimate     p.value statistic  n gp  Method\n1 0.334597 0.002578755  3.115659 81  2 pearson\n\n\nWhen the partial correlations calculated by controlling for the two variables were checked, both were less than 0.5. In other words, there are no remaining variables with a strong relationship. In the final model, the independent variables affecting the response variable “Amount of waste collected” were selected as “Number of master’s degree graduates” and “Total electricity consumption” using the forward selection method.\nThe results of the multiple regression analysis with the relevant columns are as follows.\n\n\nShow the code\nln_version_reg_data &lt;- log10(regression_data)\nmultiple_regression &lt;- lm(`Amount of waste collected (Tonnes)` ~ `Number of master's degree graduates` + `Total electricity consumption (MWh)`, data = ln_version_reg_data) \nsummary(multiple_regression)\n\n\n\nCall:\nlm(formula = `Amount of waste collected (Tonnes)` ~ `Number of master's degree graduates` + \n    `Total electricity consumption (MWh)`, data = ln_version_reg_data)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.29626 -0.09862 -0.00168  0.07417  0.31978 \n\nCoefficients:\n                                      Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                            1.26657    0.18717   6.767 2.18e-09 ***\n`Number of master's degree graduates`  0.87283    0.07469  11.687  &lt; 2e-16 ***\n`Total electricity consumption (MWh)`  0.09492    0.06526   1.455     0.15    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.13 on 78 degrees of freedom\nMultiple R-squared:  0.9254,    Adjusted R-squared:  0.9234 \nF-statistic: 483.4 on 2 and 78 DF,  p-value: &lt; 2.2e-16\n\n\nSince the variable representing total electricity consumption is not significant, it has been excluded from the model. Therefore, the most suitable and effective version of our model, achieving the highest possible R-squared value, is the simple regression model that solely includes the variable “Number of master’s graduates”.\n\n\nShow the code\nregression_model &lt;- lm(`Amount of waste collected (Tonnes)` ~ `Number of master's degree graduates`, data = ln_version_reg_data) \nsummary(regression_model)\n\n\n\nCall:\nlm(formula = `Amount of waste collected (Tonnes)` ~ `Number of master's degree graduates`, \n    data = ln_version_reg_data)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.312666 -0.083161 -0.001103  0.064059  0.303947 \n\nCoefficients:\n                                      Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                             1.4720     0.1237   11.90   &lt;2e-16 ***\n`Number of master's degree graduates`   0.9715     0.0315   30.84   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.1309 on 79 degrees of freedom\nMultiple R-squared:  0.9233,    Adjusted R-squared:  0.9224 \nF-statistic: 951.3 on 1 and 79 DF,  p-value: &lt; 2.2e-16\n\n\n\n\nShow the code\nlibrary(broom)\ntidy(regression_model)\n\n\n# A tibble: 2 × 5\n  term                                  estimate std.error statistic  p.value\n  &lt;chr&gt;                                    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)                              1.47     0.124       11.9 2.68e-19\n2 `Number of master's degree graduates`    0.971    0.0315      30.8 8.17e-46\n\n\nModel adequacy checking in a regression model is best achieved by thoroughly analyzing the residuals. Below are the graphs related to residual analysis.\nThere seems no problem in Residual vs Fitted values plot. This means that the assumption of constant variance is satisfied.\n\n\nShow the code\nggplot(ln_version_reg_data, aes(x = fitted(regression_model), y = resid(regression_model))) +\n  geom_point(size = 3, shape = 18) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(x = \"Fitted Values\", y = \"Residuals\", title = \"Residuals vs Fitted Plot\") +\n  theme_minimal()\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nThe q-q plot to check if residuals are normally distributed is drawn, and there is no problem with that.\n\n\nShow the code\nlibrary(ggthemes)\nggplot(ln_version_reg_data, aes(sample = resid(regression_model))) +\n  stat_qq() +\n  stat_qq_line(color = \"magenta\") +\n  labs(title = \"Normal Q-Q Plot\") +\n  theme_clean()\n\n\n\n\n\n\n\n\n\nIn the Q-Q plot, tails are observed on both the right and left sides. To be sure, an Anderson-Darling normality test should also be conducted.\n\n\nShow the code\nlibrary(nortest)\nresiduals &lt;- resid(regression_model)\n\nad_test_results &lt;- ad.test(residuals)\nprint(ad_test_results)\n\n\n\n    Anderson-Darling normality test\n\ndata:  residuals\nA = 0.43796, p-value = 0.2882\n\n\nA p-value of 0.28 in the Anderson-Darling test indicates that there is not enough evidence to reject the null hypothesis that the residuals are normally distributed. Therefore, it can be assumed that the residuals are normally distributed; the normality assumption for the regression model’s residuals is considered to be met.\nThe plot below helps to check for homoscedasticity. According to it, there is no such a problem.\n\n\nShow the code\nggplot(ln_version_reg_data, aes(x = fitted(regression_model), y = sqrt(abs(resid(regression_model))))) +\n  geom_point(size = 3, color = \"turquoise\")  +\n  labs(x = \"Fitted Values\", y = \"Square Root of Absolute Residuals\", title = \"Scale-Location Plot\") +\n  theme_calc()"
  },
  {
    "objectID": "project.html#general-information-about-the-main-data",
    "href": "project.html#general-information-about-the-main-data",
    "title": "STOP COMPLAINING, IT SOLVES NOTHING.",
    "section": "2.2 General Information About the Main Data ",
    "text": "2.2 General Information About the Main Data \n\nFirst data set: The municipal waste amount data of Turkiye, which includes information such as the population of Turkiye and its 81 provinces’ municipalities, total waste amounts for the year 2022, the average waste amount per person, etc.\n\n\n\nShow the code\nlibrary(openxlsx)\n\n\nWarning: package 'openxlsx' was built under R version 4.3.3\n\n\nShow the code\nmunicipal_waste &lt;- read.xlsx(\"project/data/municipal_waste.xlsx\")\n\n\n\nSecond data set: Data including the amounts of collected municipal waste that are sent to municipal landfills, waste processing facilities (the waste sent to landfill sites, incineration plants and all the waste recovery facilities), and disposed of using other methods (disposals by burning in an open area, dumping into river/onto land and burying).\n\n\n\nShow the code\nwhere_to_municipal_waste &lt;- read.xlsx(\"project/data/where_to_municipal_waste.xlsx\")\n\n\n\nThird data set: Time series data including municipal waste amounts, waste per capita, waste sent to processing facilities, etc., and time series of waste amounts by provinces of Turkiye for the years 1994-2022.\n\n\n\nShow the code\ntime_series_municipal_waste &lt;- read.xlsx(\"project/data/time_series_municipal_waste.xlsx\", colNames = TRUE)\nts_province &lt;- read.xlsx(\"project/data/ts_waste_province.xlsx\")"
  },
  {
    "objectID": "project.html#results-and-discussion",
    "href": "project.html#results-and-discussion",
    "title": "STOP COMPLAINING, IT SOLVES NOTHING.",
    "section": "3.4 Results and Discussion ",
    "text": "3.4 Results and Discussion \nBased on the time series analysis, it was concluded that the DGM model is the most appropriate time series model for the data containing total MSW quantities. The fact that data is not available at irregular intervals of time already tells us that the model suitable for the data should be discrete. The DGM model forecasted the next five years with the following values: 30,271.09, 30,922.96, 30,883.69, 31,518.20, and 31,456.93 tonnes. As shown in plots above, the model closely fits the historical data and strengthens the reliability of these forecast values. It is also the best method according to the RMSE performance metric.\nThe observed increasing trend is consistent with Turkiye’s historical waste generation patterns and highlights the increasing waste management challenge posed by urbanization and population growth. In addition, considering Turkiye’s population growth, waste generation per capita was also analysed in the study. The per capita waste forecasts have shown a decreasing trend over the years.\nIn addition, the MSW time series analysis of our city (Ankara) is also included. The DGM model was again dominant, which is logical since it is again an interval time data."
  }
]